package com.language.parser;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.util.*;

import com.language.model.expression.*;
import com.language.exceptions.ParsingException;

/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */

parser code {:

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }

    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

terminal OPAMAS, OPAMENOS, OPAPROD, OPAEXP,OPADIV,OPADIVENTERA,OPAMOD;
terminal OPBABDAND, OPBABOR, OPBABXOR, OPBABNOT, OPBABSHIFTL, OPBABSHIFTR;
terminal AND, OR, NOT, OPBIGUAL, OPBDISTINTO, OPBMENOR, OPBMAYOR, OPBMENORIGUAL, OPBMAYORIGUAL;
terminal ASIG, LCORCHETE, RCORCHETE, LLLAVE, RLLAVE,LPAREN,RPAREN,PUNTOYCOMA ,PUNTO, COMA, DOSPUNTOS;
terminal TRUE, FALSE, NONE;
terminal IF, ELSE, WHILE, BREAK, CONTINUE, FOR,IN;
terminal DEF,DATAFUNCION, FUNCION,RETURN,PRINT;
terminal STRING, ID, INTEGER, LONG, FLOAT;
terminal TAB, NOTAB;
terminal NEWLINE;
terminal RAW_INPUT;

non terminal ArrayList<Sentencia> program;
non terminal ArrayList<Expresion> expression_list;
non terminal Sentencia statment,simple_stmt,compound_stmt,if_stmt,for_stmt,while_stmt,return_stmt;
non terminal ArrayList<Sentencia> suite, suite_statment;
non terminal Variable  assignment_stmt;
non terminal Expresion list_display,atom, literal, power, primary;
non terminal Expresion u_expr,m_expr,a_expr;
non terminal Expresion shift_expr,and_expr,xor_expr,or_expr;
non terminal Expresion or_test,and_test,not_test, comparison;
non terminal Expresion expression,expression_stmt,enclosure,parenth_form;
non terminal FuncionesPredefinidas print_stmt,raw_input,func_predef;
non terminal FuncionDef funcdef;
non terminal FuncionCall call;
non terminal ArrayList<String> assignment_ids;

precedence left OPAMAS, OPAMENOS;

//Programa principal
program ::= program:p statment:s {: p.add(s); RESULT = p; :}
            | {: RESULT = new ArrayList<Sentencia>(); :}
            ;

statment ::= simple_stmt:s NEWLINE{: RESULT = s; :}
            |compound_stmt:c {: RESULT = c; :}
            ;

compound_stmt ::=   if_stmt:i {: RESULT = i; :}
                  |while_stmt:w {: RESULT = w; :}
                  | for_stmt:f  {: RESULT = f; :}
                  | funcdef:f {: RESULT = f; :}
                  ;
                                                  
for_stmt ::=  FOR ID:id IN expression_list:el DOSPUNTOS suite:s {:
																  Expresion e = el.get(0);
																  if((e.getTipo()!=TipoExpresion.LIST)&&(e.getTipo()!=TipoExpresion.ID))
																	throw new ParsingException(ParsingException.ERROR_FOR1);
																  if(e.getTipo()==TipoExpresion.LIST){
																	if(e.getArguments().size()<2)
																	  throw new ParsingException(ParsingException.ERROR_FOR2);
																  }
																   RESULT = new For(id,el,s,elleft+1,elright+1);
															   :}
            ;

//originalmente era expression_list
while_stmt ::= WHILE expression:pe DOSPUNTOS suite:su {: RESULT = new While(pe,su,peleft+1,peright+1);:}
              ;
//originalmente era expression_list
if_stmt ::=   IF expression:pe DOSPUNTOS suite:su {: RESULT = new If(pe,su,peleft+1,peright+1);:}
            | IF expression:pe DOSPUNTOS suite:su ELSE DOSPUNTOS suite:su2 {: RESULT = new If(pe,su,su2,peleft+1,peright+1);:}
            ;

suite ::= NEWLINE TAB suite_statment:s NOTAB {: RESULT = s; :}
          ;

suite_statment ::= suite_statment:ss statment:s {: ss.add(s); RESULT = ss; :}
                    | {: RESULT = new ArrayList<Sentencia>(); :}
                    ;

//Sentencia simple
simple_stmt ::=   expression_stmt:e {: RESULT = e;:}
                | assignment_stmt:a PUNTOYCOMA {: RESULT = a;:}
                | assignment_stmt:a {: RESULT = a;:}
                | print_stmt:p PUNTOYCOMA {: RESULT = p;:}
                | print_stmt:p {: RESULT = p;:}
				| BREAK: f {:RESULT = new Break(fleft+1,fright+1);:}
				| CONTINUE: f {:RESULT = new Continue (fleft+1,fright+1);:}
				| return_stmt:r {:RESULT = r;:}
                ;
				
return_stmt ::= RETURN:r {: RESULT = new Return (rleft+1,rright+1); :}
				| RETURN:r expression_list:e {: RESULT = new Return (e,rleft+1,rright+1); :}
				;

//Originalmente era expression_list
assignment_stmt ::=   assignment_ids:i ASIG:a expression:e {: RESULT = new Variable (i,e, aleft+1, aright+1); :}
                    | assignment_ids:i ASIG:a raw_input:r {: RESULT = new Variable (i,r, aleft+1, aright+1); :}
                    ;
					
assignment_ids ::= ID:i {: 
							ArrayList<String> ai = new ArrayList<String>();
							ai.add(i.toString());
							RESULT = ai;
						:} 
					| assignment_ids:ai COMA ID:i 	{:
														ai.add(i.toString());
														RESULT = ai;
													:}
					;

//Originalmente era expression_list
expression_stmt ::=  expression:el {: RESULT = el;:}
                ;

expression ::= or_test:o {: RESULT = o; :}
              ;

or_test ::= and_test:a {: RESULT = a; :}
            | or_test:or OR:o and_test:a {: RESULT = new Expresion("or",or,a,TipoExpresion.BINARIA,oleft+1,oright+1); :}
            ;

and_test ::= not_test:n {: RESULT = n; :}
            | and_test:a AND:o not_test:n {: RESULT = new Expresion("and",a,n,TipoExpresion.BINARIA,oleft+1,oright+1); :}
            ;

not_test ::=    comparison:c {: RESULT = c; :}
              | NOT:o not_test:n {: RESULT = new Expresion("not",n,TipoExpresion.UNARIA,oleft+1,oright+1); :}
              ;

comparison ::=   or_expr:o {: RESULT = o; :}
                     | comparison:c OPBMENOR:o or_expr:or {: RESULT = new Expresion("<",c,or,TipoExpresion.BINARIA,oleft+1,oright+1); :}
                     | comparison:c OPBMAYOR:o or_expr:or {: RESULT = new Expresion(">",c,or,TipoExpresion.BINARIA,oleft+1,oright+1); :}
					 | comparison:c OPBMENORIGUAL:o or_expr:or {: RESULT = new Expresion("<=",c,or,TipoExpresion.BINARIA,oleft+1,oright+1); :}
                     | comparison:c OPBMAYORIGUAL:o or_expr:or {: RESULT = new Expresion(">=",c,or,TipoExpresion.BINARIA,oleft+1,oright+1); :}
                     | comparison:c OPBIGUAL:o or_expr:or {: RESULT = new Expresion("==",c,or,TipoExpresion.BINARIA,oleft+1,oright+1); :}
                     | comparison:c OPBDISTINTO:o or_expr:or {: RESULT = new Expresion("!=",c,or,TipoExpresion.BINARIA,oleft+1,oright+1); :}
                     ;

//Expresiones arigmeticas bit a bit

or_expr ::=   xor_expr:x {: RESULT = x; :}
            | or_expr:or OPBABOR:o xor_expr:x {: RESULT = new Expresion("|",or,x,TipoExpresion.BINARIA,oleft+1,oright+1); :}
            ;

xor_expr ::=  and_expr:a {: RESULT = a; :}
              | xor_expr:x OPBABXOR:o and_expr:a  {: RESULT = new Expresion("^",x,a,TipoExpresion.BINARIA,oleft+1,oright+1); :}
              ;

and_expr ::=    shift_expr:s {: RESULT = s; :}
              | and_expr:a OPBABDAND:o shift_expr:s {: RESULT = new Expresion("&",a,s,TipoExpresion.BINARIA,oleft+1,oright+1); :}
              ;

shift_expr ::=  a_expr:a {: RESULT = a; :}
              | shift_expr:s OPBABSHIFTR:o a_expr:a {: RESULT = new Expresion(">>",s,a,TipoExpresion.BINARIA,oleft+1,oright+1); :}
              | shift_expr:s OPBABSHIFTL:o a_expr:a {: RESULT = new Expresion("<<",s,a,TipoExpresion.BINARIA,oleft+1,oright+1); :}
              ;

//Expresiones aritmeticas

a_expr ::=  m_expr:m {: RESULT = m; :}
          | a_expr:a OPAMAS:o m_expr:m {: RESULT = new Expresion("+",a,m,TipoExpresion.BINARIA,oleft+1,oright+1); :}
          | a_expr:a OPAMENOS:o m_expr:m {: RESULT = new Expresion("-",a,m,TipoExpresion.BINARIA,oleft+1,oright+1); :}
          ;

m_expr ::=    u_expr: u {: RESULT = u;:}
            | m_expr:m OPAPROD:o u_expr:u {: RESULT = new Expresion("*",m,u,TipoExpresion.BINARIA,oleft+1,oright+1); :}
            | m_expr:m OPADIVENTERA:o u_expr:u {: RESULT = new Expresion("//",m,u,TipoExpresion.BINARIA,oleft+1,oright+1); :}
            | m_expr:m OPADIV:o u_expr:u {: RESULT = new Expresion("/",m,u,TipoExpresion.BINARIA,oleft+1,oright+1); :}
            | m_expr:m OPAMOD:o u_expr:u {: RESULT = new Expresion("%",m,u,TipoExpresion.BINARIA,oleft+1,oright+1); :}
            ;

u_expr ::=    power:p {: RESULT = p; :}
            | OPAMENOS:o u_expr:u {: RESULT = new Expresion("-",u,TipoExpresion.UNARIA,oleft+1,oright+1); :}
            | OPAMAS:o u_expr:u {: RESULT = new Expresion("+",u,TipoExpresion.UNARIA,oleft+1,oright+1); :}
            | OPBABNOT:o u_expr:u {: RESULT = new Expresion("~",u,TipoExpresion.UNARIA,oleft+1,oright+1); :}
            ;

power ::=   primary: p {: RESULT = p; :}
          | primary:p OPAEXP:o u_expr:u {: RESULT = new Expresion("**",p,u,TipoExpresion.BINARIA,oleft+1,oright+1); :}
          ;

primary ::=   atom:a {: RESULT = a; :}
            | call:c {: RESULT = c; :}
            | func_predef:fp {: RESULT = fp; :}
            ;

atom ::= literal:l {: RESULT = l;:}
        | enclosure:en {:RESULT = en;:}
        | ID: id  {:RESULT = new Expresion(id,TipoExpresion.ID,idleft+1,idright+1);:}
        ;

enclosure ::=   list_display:l {:RESULT = l;:}
              | parenth_form:p {:RESULT = p;:}
              ;

parenth_form ::= LPAREN expression_list:el COMA RPAREN {: RESULT = new Expresion("TUPLA",el,TipoExpresion.TUPLA,elleft+1,elright+1);:}
                |LPAREN expression_list:el RPAREN {: if (el.size() == 1) 
                                    RESULT = el.get(0);
                                  else 
                                    RESULT = new Expresion("TUPLA",el,TipoExpresion.TUPLA,elleft+1,elright+1); :}
                |LPAREN:l RPAREN {: ArrayList<Expresion> a = new ArrayList<Expresion>();
                          RESULT = new Expresion("TUPLA",a,TipoExpresion.TUPLA,lleft+1,lright+1);:}
                ;

list_display ::= LCORCHETE expression_list:el RCORCHETE {:RESULT = new Expresion("LIST",el,TipoExpresion.LIST,elleft+1,elright+1);:}
                ;

expression_list ::=   expression:e {: ArrayList<Expresion> a = new ArrayList<Expresion>();
                    a.add(e) ;
                    RESULT = a;:}
                    | expression_list:el COMA expression:e {: el.add(e); RESULT = el;  :}                    
                    ;

literal ::=   STRING: s {:RESULT = new Expresion(s,TipoExpresion.STRING,sleft+1,sright+1);:}
            | INTEGER: i {:RESULT = new Expresion(i,TipoExpresion.INTEGER,ileft+1,iright+1);:}
            | LONG: l {:RESULT = new Expresion(l,TipoExpresion.LONG,lleft+1,lright+1);:}
            | FLOAT: d {:RESULT = new Expresion(d,TipoExpresion.FLOAT,dleft+1,dright+1);:}
            | TRUE: t {:RESULT = new Expresion(t,TipoExpresion.BOOL,tleft+1,tright+1);:}
            | FALSE: f {:RESULT = new Expresion(f,TipoExpresion.BOOL,fleft+1,fright+1);:}
			| NONE: n {:RESULT = new Expresion(n,TipoExpresion.NONE,nleft+1,nright+1);:}
            ;

print_stmt ::= PRINT expression:e {:RESULT = new FuncionesPredefinidas("print", e, eleft+1,eright+1);:}
                ;

raw_input ::=   RAW_INPUT LPAREN literal:l  RPAREN  {:RESULT = new FuncionesPredefinidas("raw_input", l, lleft+1,lright+1);:}
              | RAW_INPUT:r LPAREN   RPAREN  {:RESULT = new FuncionesPredefinidas("raw_input", rleft+1,rright+1);:}
              ;

funcdef ::= DEF ID:id LPAREN expression_list:el RPAREN DOSPUNTOS suite:s {:
                        for (Expresion e: el){
                          if(e.getTipo()!=TipoExpresion.ID)
                            throw new ParsingException("Error en la declaracion de funcion: debe ingresar una lista de identificadores");
                        }
                        ArrayList<String> parametros = new ArrayList<String> ();
                        for (Expresion e: el){
                          if(parametros.contains(e.getValor()))
                            throw new ParsingException("Error en la declaracion de funcion: no puede haber parametros repetidos");
                               
                          parametros.add(e.getValor());
                        }
                        RESULT = new FuncionDef(id, parametros, s);:}

            | DEF ID:id LPAREN  RPAREN DOSPUNTOS suite:s {:
                          ArrayList<String> parametros = new ArrayList<String> ();
                          RESULT = new FuncionDef(id, parametros, s);:}
             ;

func_predef ::= 	ID:id PUNTO DATAFUNCION:f parenth_form:pf {:RESULT = new FuncionesPredefinidas(f,id,pf,idleft+1,idright+1);:}
				;
call ::=  ID:id parenth_form:p 	{: 	if (p.getTipo() == TipoExpresion.TUPLA )
										RESULT = new FuncionCall(id,p.getArguments(),idleft+1,idright+1);
									else 
										RESULT = new FuncionCall(id,p,idleft+1,idright+1);
								:}
        ;