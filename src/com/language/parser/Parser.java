
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 13 19:00:32 GFT 2015
//----------------------------------------------------

package com.language.parser;

import java_cup.runtime.*;
import java.util.*;
import com.language.model.expression.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 13 19:00:32 GFT 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\024\004\000\002\024\003" +
    "\000\002\024\004\000\002\024\003\000\002\025\005\000" +
    "\002\023\003\000\002\023\005\000\002\020\003\000\002" +
    "\020\005\000\002\021\003\000\002\021\004\000\002\022" +
    "\003\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\016\003\000\002\016\005\000\002\015\003\000\002" +
    "\015\005\000\002\014\003\000\002\014\005\000\002\013" +
    "\003\000\002\013\005\000\002\013\005\000\002\012\003" +
    "\000\002\012\005\000\002\012\005\000\002\011\003\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\010\003\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\006\003\000\002\006\005" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\007" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\034\002\ufffe\004\ufffe\005\ufffe\016\ufffe\023" +
    "\ufffe\037\ufffe\045\ufffe\046\ufffe\063\ufffe\064\ufffe\065\ufffe" +
    "\066\ufffe\067\ufffe\001\002\000\004\002\126\001\002\000" +
    "\034\002\001\004\027\005\012\016\021\023\016\037\022" +
    "\045\020\046\034\063\026\064\023\065\037\066\010\067" +
    "\030\001\002\000\064\002\uffeb\004\uffeb\005\uffeb\014\uffeb" +
    "\015\055\016\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\037\uffeb\040\uffeb" +
    "\041\uffeb\045\uffeb\046\uffeb\063\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\001\002\000\104\002\uffd3\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\045\uffd3\046\uffd3\063\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\067\uffd3\001\002\000\104\002" +
    "\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\037\uffcf\040\uffcf\041\uffcf\045" +
    "\uffcf\046\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf" +
    "\001\002\000\104\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007" +
    "\124\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\045\uffd6\046\uffd6\063\uffd6\064\uffd6\065" +
    "\uffd6\066\uffd6\067\uffd6\001\002\000\030\004\027\005\012" +
    "\016\021\037\022\045\020\046\034\063\026\064\051\065" +
    "\037\066\010\067\030\001\002\000\102\002\uffe2\004\uffe2" +
    "\005\uffe2\006\067\010\072\011\071\012\070\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\045\uffe2\046\uffe2\063\uffe2" +
    "\064\uffe2\065\uffe2\066\uffe2\067\uffe2\001\002\000\102\002" +
    "\uffdf\004\uffdf\005\uffdf\006\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\037\uffdf\040\uffdf\041\uffdf\045\uffdf\046" +
    "\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\001\002" +
    "\000\036\002\ufffa\004\ufffa\005\ufffa\016\ufffa\023\ufffa\037" +
    "\ufffa\041\122\045\ufffa\046\ufffa\063\ufffa\064\ufffa\065\ufffa" +
    "\066\ufffa\067\ufffa\001\002\000\032\004\027\005\012\016" +
    "\021\023\016\037\022\045\020\046\034\063\026\064\051" +
    "\065\037\066\010\067\030\001\002\000\034\002\uffff\004" +
    "\uffff\005\uffff\016\uffff\023\uffff\037\uffff\045\uffff\046\uffff" +
    "\063\uffff\064\uffff\065\uffff\066\uffff\067\uffff\001\002\000" +
    "\104\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\045\uffcd\046\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd" +
    "\067\uffcd\001\002\000\030\004\027\005\012\016\021\037" +
    "\022\045\020\046\034\063\026\064\051\065\037\066\010" +
    "\067\030\001\002\000\032\004\027\005\012\016\021\023" +
    "\016\037\022\045\020\046\034\063\026\064\051\065\037" +
    "\066\010\067\030\001\002\000\104\002\uffd2\004\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\114\037\uffd2\041\uffd2\045\uffd2\046\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\001\002\000\102" +
    "\002\uffda\004\uffda\005\uffda\006\uffda\010\uffda\011\uffda\012" +
    "\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027" +
    "\uffda\030\uffda\031\uffda\037\uffda\040\uffda\041\uffda\045\uffda" +
    "\046\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\001" +
    "\002\000\044\002\ufff8\004\ufff8\005\ufff8\016\ufff8\021\111" +
    "\022\ufff8\023\ufff8\037\ufff8\040\ufff8\041\ufff8\045\ufff8\046" +
    "\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\001\002" +
    "\000\104\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\045\uffd1\046\uffd1\063\uffd1\064\uffd1\065\uffd1\066" +
    "\uffd1\067\uffd1\001\002\000\030\004\027\005\012\016\021" +
    "\037\022\045\020\046\034\063\026\064\051\065\037\066" +
    "\010\067\030\001\002\000\104\002\uffce\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\037\uffce\040\uffce\041\uffce\045\uffce\046\uffce\063\uffce" +
    "\064\uffce\065\uffce\066\uffce\067\uffce\001\002\000\040\002" +
    "\ufffc\004\ufffc\005\ufffc\016\ufffc\022\107\023\ufffc\037\ufffc" +
    "\041\106\045\ufffc\046\ufffc\063\ufffc\064\ufffc\065\ufffc\066" +
    "\ufffc\067\ufffc\001\002\000\062\002\ufff2\004\ufff2\005\ufff2" +
    "\014\053\016\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\045\ufff2\046\ufff2\063\ufff2\064\ufff2\065\ufff2\066" +
    "\ufff2\067\ufff2\001\002\000\072\002\uffe5\004\064\005\065" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\037\uffe5\040\uffe5\041\uffe5\045\uffe5\046" +
    "\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\001\002" +
    "\000\104\002\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\045\uffcc\046\uffcc\063\uffcc\064\uffcc\065\uffcc\066" +
    "\uffcc\067\uffcc\001\002\000\104\002\uffd4\004\uffd4\005\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\045\uffd4\046\uffd4\063\uffd4" +
    "\064\uffd4\065\uffd4\066\uffd4\067\uffd4\001\002\000\066\002" +
    "\uffe9\004\uffe9\005\uffe9\013\057\014\uffe9\015\uffe9\016\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\037\uffe9\040\uffe9\041\uffe9\045\uffe9" +
    "\046\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\001" +
    "\002\000\104\002\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\045\uffd0\046\uffd0\063\uffd0\064\uffd0\065\uffd0" +
    "\066\uffd0\067\uffd0\001\002\000\072\002\uffe7\004\uffe7\005" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\061\020\062" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\037\uffe7\040\uffe7\041\uffe7\045\uffe7" +
    "\046\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\001" +
    "\002\000\060\002\ufff4\004\ufff4\005\ufff4\016\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\024\046\025\045\026\047\027\050\030" +
    "\044\031\043\037\ufff4\040\ufff4\041\ufff4\045\ufff4\046\ufff4" +
    "\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\001\002\000" +
    "\044\002\ufff6\004\ufff6\005\ufff6\016\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\037\ufff6\040\ufff6\041\ufff6\045\ufff6\046\ufff6\063" +
    "\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\001\002\000\030" +
    "\004\027\005\012\016\021\037\022\045\020\046\034\063" +
    "\026\064\051\065\037\066\010\067\030\001\002\000\030" +
    "\004\027\005\012\016\021\037\022\045\020\046\034\063" +
    "\026\064\051\065\037\066\010\067\030\001\002\000\030" +
    "\004\027\005\012\016\021\037\022\045\020\046\034\063" +
    "\026\064\051\065\037\066\010\067\030\001\002\000\030" +
    "\004\027\005\012\016\021\037\022\045\020\046\034\063" +
    "\026\064\051\065\037\066\010\067\030\001\002\000\030" +
    "\004\027\005\012\016\021\037\022\045\020\046\034\063" +
    "\026\064\051\065\037\066\010\067\030\001\002\000\030" +
    "\004\027\005\012\016\021\037\022\045\020\046\034\063" +
    "\026\064\051\065\037\066\010\067\030\001\002\000\104" +
    "\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\037\uffd2\040\uffd2\041\uffd2" +
    "\045\uffd2\046\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067" +
    "\uffd2\001\002\000\062\002\ufff0\004\ufff0\005\ufff0\014\053" +
    "\016\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\045\ufff0\046\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067" +
    "\ufff0\001\002\000\030\004\027\005\012\016\021\037\022" +
    "\045\020\046\034\063\026\064\051\065\037\066\010\067" +
    "\030\001\002\000\064\002\uffea\004\uffea\005\uffea\014\uffea" +
    "\015\055\016\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\037\uffea\040\uffea" +
    "\041\uffea\045\uffea\046\uffea\063\uffea\064\uffea\065\uffea\066" +
    "\uffea\067\uffea\001\002\000\030\004\027\005\012\016\021" +
    "\037\022\045\020\046\034\063\026\064\051\065\037\066" +
    "\010\067\030\001\002\000\066\002\uffe8\004\uffe8\005\uffe8" +
    "\013\057\014\uffe8\015\uffe8\016\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\045\uffe8\046\uffe8\063\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\067\uffe8\001\002\000\030\004\027" +
    "\005\012\016\021\037\022\045\020\046\034\063\026\064" +
    "\051\065\037\066\010\067\030\001\002\000\072\002\uffe6" +
    "\004\uffe6\005\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017" +
    "\061\020\062\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\037\uffe6\040\uffe6\041" +
    "\uffe6\045\uffe6\046\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6" +
    "\067\uffe6\001\002\000\030\004\027\005\012\016\021\037" +
    "\022\045\020\046\034\063\026\064\051\065\037\066\010" +
    "\067\030\001\002\000\030\004\027\005\012\016\021\037" +
    "\022\045\020\046\034\063\026\064\051\065\037\066\010" +
    "\067\030\001\002\000\072\002\uffe4\004\064\005\065\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\037\uffe4\040\uffe4\041\uffe4\045\uffe4\046\uffe4" +
    "\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\001\002\000" +
    "\030\004\027\005\012\016\021\037\022\045\020\046\034" +
    "\063\026\064\051\065\037\066\010\067\030\001\002\000" +
    "\030\004\027\005\012\016\021\037\022\045\020\046\034" +
    "\063\026\064\051\065\037\066\010\067\030\001\002\000" +
    "\102\002\uffe0\004\uffe0\005\uffe0\006\067\010\072\011\071" +
    "\012\070\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\037\uffe0\040\uffe0\041\uffe0\045" +
    "\uffe0\046\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0" +
    "\001\002\000\030\004\027\005\012\016\021\037\022\045" +
    "\020\046\034\063\026\064\051\065\037\066\010\067\030" +
    "\001\002\000\030\004\027\005\012\016\021\037\022\045" +
    "\020\046\034\063\026\064\051\065\037\066\010\067\030" +
    "\001\002\000\030\004\027\005\012\016\021\037\022\045" +
    "\020\046\034\063\026\064\051\065\037\066\010\067\030" +
    "\001\002\000\030\004\027\005\012\016\021\037\022\045" +
    "\020\046\034\063\026\064\051\065\037\066\010\067\030" +
    "\001\002\000\102\002\uffdc\004\uffdc\005\uffdc\006\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\045\uffdc\046\uffdc\063\uffdc\064\uffdc\065\uffdc\066" +
    "\uffdc\067\uffdc\001\002\000\102\002\uffdd\004\uffdd\005\uffdd" +
    "\006\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\045\uffdd\046\uffdd\063\uffdd\064\uffdd" +
    "\065\uffdd\066\uffdd\067\uffdd\001\002\000\102\002\uffdb\004" +
    "\uffdb\005\uffdb\006\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\037\uffdb\040\uffdb\041\uffdb\045\uffdb\046\uffdb\063" +
    "\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\001\002\000\102" +
    "\002\uffde\004\uffde\005\uffde\006\uffde\010\uffde\011\uffde\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\037\uffde\040\uffde\041\uffde\045\uffde" +
    "\046\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\001" +
    "\002\000\102\002\uffe1\004\uffe1\005\uffe1\006\067\010\072" +
    "\011\071\012\070\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\045\uffe1\046\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1" +
    "\067\uffe1\001\002\000\072\002\uffe3\004\064\005\065\013" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\037\uffe3\040\uffe3\041\uffe3\045\uffe3\046\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\001\002\000" +
    "\062\002\ufff1\004\ufff1\005\ufff1\014\053\016\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030" +
    "\ufff1\031\ufff1\037\ufff1\040\ufff1\041\ufff1\045\ufff1\046\ufff1" +
    "\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\001\002\000" +
    "\062\002\uffef\004\uffef\005\uffef\014\053\016\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\037\uffef\040\uffef\041\uffef\045\uffef\046\uffef" +
    "\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef\001\002\000" +
    "\062\002\uffec\004\uffec\005\uffec\014\053\016\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\037\uffec\040\uffec\041\uffec\045\uffec\046\uffec" +
    "\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\001\002\000" +
    "\062\002\uffed\004\uffed\005\uffed\014\053\016\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030" +
    "\uffed\031\uffed\037\uffed\040\uffed\041\uffed\045\uffed\046\uffed" +
    "\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\001\002\000" +
    "\062\002\uffee\004\uffee\005\uffee\014\053\016\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\037\uffee\040\uffee\041\uffee\045\uffee\046\uffee" +
    "\063\uffee\064\uffee\065\uffee\066\uffee\067\uffee\001\002\000" +
    "\034\002\ufffd\004\ufffd\005\ufffd\016\ufffd\023\ufffd\037\ufffd" +
    "\045\ufffd\046\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067" +
    "\ufffd\001\002\000\032\004\027\005\012\016\021\023\016" +
    "\037\022\045\020\046\034\063\026\064\051\065\037\066" +
    "\010\067\030\001\002\000\044\002\ufff7\004\ufff7\005\ufff7" +
    "\016\ufff7\021\111\022\ufff7\023\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\045\ufff7\046\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7" +
    "\067\ufff7\001\002\000\032\004\027\005\012\016\021\023" +
    "\016\037\022\045\020\046\034\063\026\064\051\065\037" +
    "\066\010\067\030\001\002\000\044\002\ufff5\004\ufff5\005" +
    "\ufff5\016\ufff5\021\ufff5\022\ufff5\023\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\045\ufff5\046\ufff5\063\ufff5\064\ufff5\065\ufff5\066" +
    "\ufff5\067\ufff5\001\002\000\102\002\uffd8\004\uffd8\005\uffd8" +
    "\006\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\045\uffd8\046\uffd8\063\uffd8\064\uffd8" +
    "\065\uffd8\066\uffd8\067\uffd8\001\002\000\032\004\027\005" +
    "\012\016\021\023\016\037\022\045\020\046\034\063\026" +
    "\064\051\065\037\066\010\067\030\001\002\000\040\002" +
    "\ufff9\004\ufff9\005\ufff9\016\ufff9\022\107\023\ufff9\037\ufff9" +
    "\041\ufff9\045\ufff9\046\ufff9\063\ufff9\064\ufff9\065\ufff9\066" +
    "\ufff9\067\ufff9\001\002\000\006\022\107\040\117\001\002" +
    "\000\104\002\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010" +
    "\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\045\uffcb\046\uffcb\063\uffcb\064\uffcb\065\uffcb\066" +
    "\uffcb\067\uffcb\001\002\000\102\002\uffd7\004\uffd7\005\uffd7" +
    "\006\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\045\uffd7\046\uffd7\063\uffd7\064\uffd7" +
    "\065\uffd7\066\uffd7\067\uffd7\001\002\000\044\002\ufff3\004" +
    "\ufff3\005\ufff3\016\ufff3\021\ufff3\022\ufff3\023\ufff3\037\ufff3" +
    "\040\ufff3\041\ufff3\045\ufff3\046\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\067\ufff3\001\002\000\034\002\ufffb\004\ufffb" +
    "\005\ufffb\016\ufffb\023\ufffb\037\ufffb\045\ufffb\046\ufffb\063" +
    "\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\001\002\000\102" +
    "\002\uffd9\004\uffd9\005\uffd9\006\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\037\uffd9\040\uffd9\041\uffd9\045\uffd9" +
    "\046\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\001" +
    "\002\000\030\004\027\005\012\016\021\037\022\045\020" +
    "\046\034\063\026\064\051\065\037\066\010\067\030\001" +
    "\002\000\102\002\uffd5\004\uffd5\005\uffd5\006\uffd5\010\uffd5" +
    "\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\045\uffd5\046\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5" +
    "\067\uffd5\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\044\004\010\005\034\006\023\007\006\010\013" +
    "\011\012\012\032\013\037\014\035\015\005\016\031\020" +
    "\024\021\041\022\040\023\030\024\016\025\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\010\005\034\006\023\007\006" +
    "\010\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\010\005\034\006\023\007\006" +
    "\010\013\011\012\012\032\013\037\014\035\015\005\016" +
    "\031\021\120\022\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\010\005\034\006\023\007\006\010" +
    "\117\001\001\000\040\004\010\005\034\006\023\007\006" +
    "\010\013\011\012\012\032\013\037\014\035\015\005\016" +
    "\031\020\024\021\041\022\040\023\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\010\005\034\006\023\007\006\010\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\010\005\034" +
    "\006\023\007\006\010\013\011\012\012\032\013\037\014" +
    "\035\015\005\016\104\001\001\000\030\004\010\005\034" +
    "\006\023\007\006\010\013\011\012\012\032\013\037\014" +
    "\035\015\005\016\103\001\001\000\030\004\010\005\034" +
    "\006\023\007\006\010\013\011\012\012\032\013\037\014" +
    "\035\015\005\016\102\001\001\000\030\004\010\005\034" +
    "\006\023\007\006\010\013\011\012\012\032\013\037\014" +
    "\035\015\005\016\101\001\001\000\030\004\010\005\034" +
    "\006\023\007\006\010\013\011\012\012\032\013\037\014" +
    "\035\015\005\016\100\001\001\000\030\004\010\005\034" +
    "\006\023\007\006\010\013\011\012\012\032\013\037\014" +
    "\035\015\005\016\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\010\005\034\006\023\007\006\010" +
    "\013\011\012\012\032\013\037\014\035\015\053\001\001" +
    "\000\002\001\001\000\024\004\010\005\034\006\023\007" +
    "\006\010\013\011\012\012\032\013\037\014\055\001\001" +
    "\000\002\001\001\000\022\004\010\005\034\006\023\007" +
    "\006\010\013\011\012\012\032\013\057\001\001\000\002" +
    "\001\001\000\020\004\010\005\034\006\023\007\006\010" +
    "\013\011\012\012\077\001\001\000\020\004\010\005\034" +
    "\006\023\007\006\010\013\011\012\012\062\001\001\000" +
    "\002\001\001\000\016\004\010\005\034\006\023\007\006" +
    "\010\013\011\076\001\001\000\016\004\010\005\034\006" +
    "\023\007\006\010\013\011\065\001\001\000\002\001\001" +
    "\000\014\004\010\005\034\006\023\007\006\010\075\001" +
    "\001\000\014\004\010\005\034\006\023\007\006\010\074" +
    "\001\001\000\014\004\010\005\034\006\023\007\006\010" +
    "\073\001\001\000\014\004\010\005\034\006\023\007\006" +
    "\010\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\010\005\034\006\023\007\006\010\013\011" +
    "\012\012\032\013\037\014\035\015\005\016\031\020\107" +
    "\021\041\022\040\001\001\000\002\001\001\000\034\004" +
    "\010\005\034\006\023\007\006\010\013\011\012\012\032" +
    "\013\037\014\035\015\005\016\031\021\111\022\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\010" +
    "\005\034\006\023\007\006\010\013\011\012\012\032\013" +
    "\037\014\035\015\005\016\031\020\024\021\041\022\040" +
    "\023\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\010\005\034\006" +
    "\023\007\006\010\124\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }

    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parenthesizedExpression ::= LPAREN expression RPAREN 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parenthesizedExpression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // literal ::= FALSE 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(f,TipoExpresion.BOOL,fleft+1,fright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literal ::= TRUE 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(t,TipoExpresion.BOOL,tleft+1,tright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // literal ::= FLOAT 
            {
              Expresion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(d,TipoExpresion.FLOAT,dleft+1,dright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // literal ::= LONG 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(l,TipoExpresion.LONG,lleft+1,lright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // literal ::= INTEGER 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(i,TipoExpresion.INTEGER,ileft+1,iright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // literal ::= STRING 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(s,TipoExpresion.STRING,sleft+1,sright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // atom ::= ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(id,TipoExpresion.ID,idleft+1,idright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atom ::= parenthesizedExpression 
            {
              Expresion RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion pe = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = pe;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // atom ::= literal 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion l = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // power ::= atom OPAEXP u_expr 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("**",a,u,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("power",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // power ::= atom 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("power",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // u_expr ::= OPBABNOT u_expr 
            {
              Expresion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("~",u,TipoExpresion.UNARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("u_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // u_expr ::= OPAMAS u_expr 
            {
              Expresion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("+",u,TipoExpresion.UNARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("u_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // u_expr ::= OPAMENOS u_expr 
            {
              Expresion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("-",u,TipoExpresion.UNARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("u_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // u_expr ::= power 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion p = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("u_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // m_expr ::= m_expr OPAMOD u_expr 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion m = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("%",m,u,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // m_expr ::= m_expr OPADIV u_expr 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion m = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("/",m,u,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // m_expr ::= m_expr OPADIVENTERA u_expr 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion m = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("//",m,u,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // m_expr ::= m_expr OPAPROD u_expr 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion m = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("*",m,u,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // m_expr ::= u_expr 
            {
              Expresion RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // a_expr ::= a_expr OPAMENOS m_expr 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion m = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("-",a,m,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // a_expr ::= a_expr OPAMAS m_expr 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion m = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("+",a,m,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // a_expr ::= m_expr 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion m = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // shift_expr ::= shift_expr OPBABSHIFTL a_expr 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("<<",s,a,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // shift_expr ::= shift_expr OPBABSHIFTR a_expr 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion(">>",s,a,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // shift_expr ::= a_expr 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // and_expr ::= and_expr OPBABDAND shift_expr 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("&",a,s,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // and_expr ::= shift_expr 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // xor_expr ::= xor_expr OPBABXOR and_expr 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion x = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("^",x,a,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("xor_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // xor_expr ::= and_expr 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("xor_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // or_expr ::= or_expr OPBABOR xor_expr 
            {
              Expresion RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion or = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion x = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("|",or,x,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("or_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // or_expr ::= xor_expr 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion x = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("or_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comparison ::= comparison OPBDISTINTO or_expr 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion or = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("!=",c,or,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // comparison ::= comparison OPBMENORIGUAL or_expr 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion or = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("<=",c,or,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comparison ::= comparison OPBMAYORIGUAL or_expr 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion or = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion(">=",c,or,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comparison ::= comparison OPBIGUAL or_expr 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion or = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("==",c,or,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comparison ::= comparison OPBMAYOR or_expr 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion or = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion(">",c,or,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comparison ::= comparison OPBMENOR or_expr 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion or = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("<",c,or,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comparison ::= or_expr 
            {
              Expresion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion o = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = o; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // not_test ::= NOT not_test 
            {
              Expresion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("not",n,TipoExpresion.UNARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_test",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // not_test ::= comparison 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_test",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // and_test ::= and_test AND not_test 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("and",a,n,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_test",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // and_test ::= not_test 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_test",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= expression OR and_test 
            {
              Expresion RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion or = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("or",or,a,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= and_test 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // assignment_stmt ::= ID ASIG expression 
            {
              Variable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable(i,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // simple_stmt ::= assignment_stmt 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // simple_stmt ::= assignment_stmt PUNTOYCOMA 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // simple_stmt ::= expression 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // simple_stmt ::= expression PUNTOYCOMA 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_list ::= 
            {
              ArrayList<Sentencia> RESULT =null;
		 RESULT = new ArrayList<Sentencia>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt_list ::= stmt_list simple_stmt 
            {
              ArrayList<Sentencia> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Sentencia> sl = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Sentencia> start_val = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmt_list 
            {
              ArrayList<Sentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Sentencia> s = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

