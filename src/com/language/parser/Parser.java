
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 15 03:09:19 GFT 2015
//----------------------------------------------------

package com.language.parser;

import java_cup.runtime.*;
import java.util.*;
import com.language.model.expression.*;
import com.language.exceptions.ParsingException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 15 03:09:19 GFT 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\005\003\000\002\005\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\012\006\000" +
    "\002\010\006\000\002\010\011\000\002\013\005\000\002" +
    "\014\004\000\002\014\002\000\002\006\003\000\002\006" +
    "\004\000\002\006\003\000\002\006\004\000\002\006\003" +
    "\000\002\015\005\000\002\037\003\000\002\036\003\000" +
    "\002\032\003\000\002\032\005\000\002\033\003\000\002" +
    "\033\005\000\002\034\003\000\002\034\004\000\002\035" +
    "\003\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\031\003\000\002\031\005\000\002\030\003\000" +
    "\002\030\005\000\002\027\003\000\002\027\005\000\002" +
    "\026\003\000\002\026\005\000\002\026\005\000\002\025" +
    "\003\000\002\025\005\000\002\025\005\000\002\024\003" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\023\003\000\002\023\004\000\002" +
    "\023\004\000\002\023\004\000\002\021\003\000\002\021" +
    "\005\000\002\022\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\040\003\000\002\040\003\000" +
    "\002\041\006\000\002\041\005\000\002\041\004\000\002" +
    "\016\005\000\002\004\003\000\002\004\005\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\042\004\000\002\043\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\050\002\uffff\004\uffff\005\uffff\016\uffff\023" +
    "\uffff\033\uffff\037\uffff\045\uffff\046\uffff\047\uffff\050\uffff" +
    "\052\uffff\057\uffff\063\uffff\064\uffff\065\uffff\066\uffff\067" +
    "\uffff\070\uffff\001\002\000\050\002\032\004\037\005\033" +
    "\016\006\023\021\033\015\037\012\045\034\046\056\047" +
    "\046\050\026\052\047\057\053\063\063\064\052\065\030" +
    "\066\010\067\051\070\050\001\002\000\122\002\uffca\004" +
    "\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca" +
    "\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\026\uffca\027\uffca\033\uffca" +
    "\034\uffca\037\uffca\040\uffca\041\uffca\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\047\uffca\050\uffca\052\uffca\057\uffca\063\uffca" +
    "\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca\072\uffca\001" +
    "\002\000\034\004\037\005\033\016\006\033\015\037\012" +
    "\045\034\046\056\047\046\064\052\065\064\066\010\067" +
    "\051\070\050\001\002\000\120\002\uffd8\004\uffd8\005\uffd8" +
    "\006\102\010\105\011\104\012\103\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\026\uffd8\027\uffd8\033\uffd8\034\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\052\uffd8\057\uffd8\063\uffd8\064\uffd8\065\uffd8\066" +
    "\uffd8\067\uffd8\070\uffd8\072\uffd8\001\002\000\122\002\uffbd" +
    "\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd\027\uffbd\033" +
    "\uffbd\034\uffbd\037\uffbd\040\uffbd\041\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\047\uffbd\050\uffbd\052\uffbd\057\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\072\uffbd" +
    "\001\002\000\054\002\uffef\004\uffef\005\uffef\016\uffef\023" +
    "\uffef\033\uffef\037\uffef\041\173\045\uffef\046\uffef\047\uffef" +
    "\050\uffef\052\uffef\057\uffef\063\uffef\064\uffef\065\uffef\066" +
    "\uffef\067\uffef\070\uffef\072\uffef\001\002\000\040\004\037" +
    "\005\033\016\006\023\021\033\015\037\012\040\166\045" +
    "\034\046\056\047\046\064\052\065\064\066\010\067\051" +
    "\070\050\001\002\000\120\002\uffd5\004\uffd5\005\uffd5\006" +
    "\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\026\uffd5\027\uffd5\033\uffd5\034\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\052\uffd5\057\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5" +
    "\067\uffd5\070\uffd5\072\uffd5\001\002\000\122\002\uffc9\004" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9\027\uffc9\033\uffc9" +
    "\034\uffc9\037\uffc9\040\uffc9\041\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\052\uffc9\057\uffc9\063\uffc9" +
    "\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\072\uffc9\001" +
    "\002\000\036\004\037\005\033\016\006\023\021\033\015" +
    "\037\012\045\034\046\056\047\046\064\052\065\064\066" +
    "\010\067\051\070\050\001\002\000\104\002\uffdf\004\uffdf" +
    "\005\uffdf\013\072\014\uffdf\015\uffdf\016\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\026\uffdf\027\uffdf\033\uffdf\034\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\043\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\052\uffdf\057\uffdf\063\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\067\uffdf\070\uffdf\072\uffdf\001\002\000" +
    "\066\002\uffec\004\uffec\005\uffec\016\uffec\022\162\023\uffec" +
    "\033\uffec\034\uffec\037\uffec\040\uffec\041\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\047\uffec\050\uffec\052\uffec\057\uffec" +
    "\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070\uffec\072" +
    "\uffec\001\002\000\122\002\uffc6\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\026\uffc6\027\uffc6\033\uffc6\034\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\052\uffc6\057\uffc6\063\uffc6\064\uffc6\065\uffc6\066" +
    "\uffc6\067\uffc6\070\uffc6\072\uffc6\001\002\000\036\004\037" +
    "\005\033\016\006\023\021\033\015\037\012\045\034\046" +
    "\056\047\046\064\052\065\064\066\010\067\051\070\050" +
    "\001\002\000\102\002\uffe1\004\uffe1\005\uffe1\014\uffe1\015" +
    "\070\016\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\026\uffe1" +
    "\027\uffe1\033\uffe1\034\uffe1\037\uffe1\040\uffe1\041\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\052\uffe1" +
    "\057\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070" +
    "\uffe1\072\uffe1\001\002\000\110\002\uffdd\004\uffdd\005\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\074\020\075\021" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\026\uffdd\027\uffdd\033\uffdd" +
    "\034\uffdd\037\uffdd\040\uffdd\041\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\052\uffdd\057\uffdd\063\uffdd" +
    "\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\072\uffdd\001" +
    "\002\000\052\002\ufffd\004\ufffd\005\ufffd\016\ufffd\023\ufffd" +
    "\033\ufffd\037\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\052" +
    "\ufffd\057\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd" +
    "\070\ufffd\072\ufffd\001\002\000\122\002\uffcc\004\uffcc\005" +
    "\uffcc\006\uffcc\007\157\010\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\033\uffcc\034\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\052\uffcc\057\uffcc\063\uffcc\064\uffcc" +
    "\065\uffcc\066\uffcc\067\uffcc\070\uffcc\072\uffcc\001\002\000" +
    "\036\004\037\005\033\016\006\023\021\033\015\037\012" +
    "\045\034\046\056\047\046\064\052\065\064\066\010\067" +
    "\051\070\050\001\002\000\052\002\ufff3\004\ufff3\005\ufff3" +
    "\016\ufff3\023\ufff3\033\ufff3\037\ufff3\045\ufff3\046\ufff3\047" +
    "\ufff3\050\ufff3\052\ufff3\057\ufff3\063\ufff3\064\ufff3\065\ufff3" +
    "\066\ufff3\067\ufff3\070\ufff3\072\ufff3\001\002\000\112\002" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\027\uffc7" +
    "\032\147\033\uffc7\037\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\052\uffc7\057\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7" +
    "\067\uffc7\070\uffc7\072\uffc7\001\002\000\052\002\uffed\004" +
    "\uffed\005\uffed\016\uffed\023\uffed\033\uffed\037\uffed\045\uffed" +
    "\046\uffed\047\uffed\050\uffed\052\uffed\057\uffed\063\uffed\064" +
    "\uffed\065\uffed\066\uffed\067\uffed\070\uffed\072\uffed\001\002" +
    "\000\004\002\000\001\002\000\034\004\037\005\033\016" +
    "\006\033\015\037\012\045\034\046\056\047\046\064\052" +
    "\065\064\066\010\067\051\070\050\001\002\000\122\002" +
    "\uffba\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba" +
    "\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\uffba\026\uffba\027\uffba" +
    "\033\uffba\034\uffba\037\uffba\040\uffba\041\uffba\043\uffba\044" +
    "\uffba\045\uffba\046\uffba\047\uffba\050\uffba\052\uffba\057\uffba" +
    "\063\uffba\064\uffba\065\uffba\066\uffba\067\uffba\070\uffba\072" +
    "\uffba\001\002\000\050\002\001\004\001\005\001\016\001" +
    "\023\001\033\001\037\001\045\001\046\001\047\001\050" +
    "\001\052\001\057\001\063\001\064\001\065\001\066\001" +
    "\067\001\070\001\001\002\000\052\002\ufffa\004\ufffa\005" +
    "\ufffa\016\ufffa\023\ufffa\033\ufffa\037\ufffa\045\ufffa\046\ufffa" +
    "\047\ufffa\050\ufffa\052\ufffa\057\ufffa\063\ufffa\064\ufffa\065" +
    "\ufffa\066\ufffa\067\ufffa\070\ufffa\072\ufffa\001\002\000\034" +
    "\004\037\005\033\016\006\033\015\037\012\045\034\046" +
    "\056\047\046\064\052\065\064\066\010\067\051\070\050" +
    "\001\002\000\052\002\ufffb\004\ufffb\005\ufffb\016\ufffb\023" +
    "\ufffb\033\ufffb\037\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb" +
    "\052\ufffb\057\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067" +
    "\ufffb\070\ufffb\072\ufffb\001\002\000\052\002\ufffe\004\ufffe" +
    "\005\ufffe\016\ufffe\023\ufffe\033\ufffe\037\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\050\ufffe\052\ufffe\057\ufffe\063\ufffe\064\ufffe" +
    "\065\ufffe\066\ufffe\067\ufffe\070\ufffe\072\ufffe\001\002\000" +
    "\122\002\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\026\uffc8" +
    "\027\uffc8\033\uffc8\034\uffc8\037\uffc8\040\uffc8\041\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\052\uffc8" +
    "\057\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070" +
    "\uffc8\072\uffc8\001\002\000\122\002\uffc5\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\026\uffc5\027\uffc5\033\uffc5\034\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\047\uffc5\050\uffc5\052\uffc5\057\uffc5\063\uffc5\064\uffc5\065" +
    "\uffc5\066\uffc5\067\uffc5\070\uffc5\072\uffc5\001\002\000\070" +
    "\002\uffeb\004\uffeb\005\uffeb\016\uffeb\021\143\022\uffeb\023" +
    "\uffeb\033\uffeb\034\uffeb\037\uffeb\040\uffeb\041\uffeb\043\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\052\uffeb\057" +
    "\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb" +
    "\072\uffeb\001\002\000\054\002\ufff1\004\ufff1\005\ufff1\016" +
    "\ufff1\023\ufff1\033\ufff1\037\ufff1\041\142\045\ufff1\046\ufff1" +
    "\047\ufff1\050\ufff1\052\ufff1\057\ufff1\063\ufff1\064\ufff1\065" +
    "\ufff1\066\ufff1\067\ufff1\070\ufff1\072\ufff1\001\002\000\122" +
    "\002\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011" +
    "\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\026\uffb8\027" +
    "\uffb8\033\uffb8\034\uffb8\037\uffb8\040\uffb8\041\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\052\uffb8\057" +
    "\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8" +
    "\072\uffb8\001\002\000\036\004\037\005\033\016\006\023" +
    "\021\033\015\037\012\045\034\046\056\047\046\064\052" +
    "\065\064\066\010\067\051\070\050\001\002\000\122\002" +
    "\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb" +
    "\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\026\uffbb\027\uffbb" +
    "\033\uffbb\034\uffbb\037\uffbb\040\uffbb\041\uffbb\043\uffbb\044" +
    "\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\052\uffbb\057\uffbb" +
    "\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\072" +
    "\uffbb\001\002\000\122\002\uffbc\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\026\uffbc\027\uffbc\033\uffbc\034\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\052\uffbc\057\uffbc\063\uffbc\064\uffbc\065\uffbc\066" +
    "\uffbc\067\uffbc\070\uffbc\072\uffbc\001\002\000\122\002\uffbe" +
    "\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\024\uffbe\026\uffbe\027\uffbe\033" +
    "\uffbe\034\uffbe\037\uffbe\040\uffbe\041\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\052\uffbe\057\uffbe\063" +
    "\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\072\uffbe" +
    "\001\002\000\004\065\122\001\002\000\052\002\ufffc\004" +
    "\ufffc\005\ufffc\016\ufffc\023\ufffc\033\ufffc\037\ufffc\045\ufffc" +
    "\046\ufffc\047\ufffc\050\ufffc\052\ufffc\057\ufffc\063\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\072\ufffc\001\002" +
    "\000\110\002\uffdb\004\077\005\100\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\026\uffdb\027\uffdb\033\uffdb\034\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\052\uffdb\057\uffdb\063\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\067\uffdb\070\uffdb\072\uffdb\001\002\000\122\002\uffb9" +
    "\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\026\uffb9\027\uffb9\033" +
    "\uffb9\034\uffb9\037\uffb9\040\uffb9\041\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\052\uffb9\057\uffb9\063" +
    "\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\072\uffb9" +
    "\001\002\000\070\002\uffe9\004\uffe9\005\uffe9\016\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\033\uffe9\034\uffe9\037\uffe9\040\uffe9" +
    "\041\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050" +
    "\uffe9\052\uffe9\057\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9" +
    "\067\uffe9\070\uffe9\072\uffe9\001\002\000\076\002\uffe7\004" +
    "\uffe7\005\uffe7\016\uffe7\021\uffe7\022\uffe7\023\uffe7\024\114" +
    "\026\115\027\116\033\uffe7\034\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7" +
    "\052\uffe7\057\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067" +
    "\uffe7\070\uffe7\072\uffe7\001\002\000\100\002\uffe5\004\uffe5" +
    "\005\uffe5\014\066\016\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\026\uffe5\027\uffe5\033\uffe5\034\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\052\uffe5\057\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\072\uffe5\001\002\000\120\002\uffd0\004" +
    "\uffd0\005\uffd0\006\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\026\uffd0\027\uffd0\033\uffd0\034\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\043\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\052\uffd0\057\uffd0\063\uffd0\064\uffd0" +
    "\065\uffd0\066\uffd0\067\uffd0\070\uffd0\072\uffd0\001\002\000" +
    "\036\004\037\005\033\016\006\023\021\033\015\037\012" +
    "\045\034\046\056\047\046\064\052\065\064\066\010\067" +
    "\051\070\050\001\002\000\122\002\uffc7\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\026\uffc7\027\uffc7\033\uffc7\034\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\052\uffc7\057\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\066\uffc7\067\uffc7\070\uffc7\072\uffc7\001\002\000\054" +
    "\002\uffb7\004\uffb7\005\uffb7\016\uffb7\023\uffb7\033\uffb7\037" +
    "\uffb7\041\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\052\uffb7" +
    "\057\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070" +
    "\uffb7\072\uffb7\001\002\000\034\004\037\005\033\016\006" +
    "\033\015\037\012\045\034\046\056\047\046\064\052\065" +
    "\064\066\010\067\051\070\050\001\002\000\102\002\uffe0" +
    "\004\uffe0\005\uffe0\014\uffe0\015\070\016\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\026\uffe0\027\uffe0\033\uffe0\034\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\052\uffe0\057\uffe0\063\uffe0\064\uffe0" +
    "\065\uffe0\066\uffe0\067\uffe0\070\uffe0\072\uffe0\001\002\000" +
    "\034\004\037\005\033\016\006\033\015\037\012\045\034" +
    "\046\056\047\046\064\052\065\064\066\010\067\051\070" +
    "\050\001\002\000\104\002\uffde\004\uffde\005\uffde\013\072" +
    "\014\uffde\015\uffde\016\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\026\uffde\027\uffde\033\uffde\034\uffde\037\uffde\040\uffde" +
    "\041\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050" +
    "\uffde\052\uffde\057\uffde\063\uffde\064\uffde\065\uffde\066\uffde" +
    "\067\uffde\070\uffde\072\uffde\001\002\000\034\004\037\005" +
    "\033\016\006\033\015\037\012\045\034\046\056\047\046" +
    "\064\052\065\064\066\010\067\051\070\050\001\002\000" +
    "\110\002\uffdc\004\uffdc\005\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\074\020\075\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\026\uffdc\027\uffdc\033\uffdc\034\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050" +
    "\uffdc\052\uffdc\057\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\067\uffdc\070\uffdc\072\uffdc\001\002\000\034\004\037\005" +
    "\033\016\006\033\015\037\012\045\034\046\056\047\046" +
    "\064\052\065\064\066\010\067\051\070\050\001\002\000" +
    "\034\004\037\005\033\016\006\033\015\037\012\045\034" +
    "\046\056\047\046\064\052\065\064\066\010\067\051\070" +
    "\050\001\002\000\110\002\uffda\004\077\005\100\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\026\uffda\027\uffda\033\uffda\034\uffda" +
    "\037\uffda\040\uffda\041\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\047\uffda\050\uffda\052\uffda\057\uffda\063\uffda\064\uffda" +
    "\065\uffda\066\uffda\067\uffda\070\uffda\072\uffda\001\002\000" +
    "\034\004\037\005\033\016\006\033\015\037\012\045\034" +
    "\046\056\047\046\064\052\065\064\066\010\067\051\070" +
    "\050\001\002\000\034\004\037\005\033\016\006\033\015" +
    "\037\012\045\034\046\056\047\046\064\052\065\064\066" +
    "\010\067\051\070\050\001\002\000\120\002\uffd6\004\uffd6" +
    "\005\uffd6\006\102\010\105\011\104\012\103\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\026\uffd6\027\uffd6\033\uffd6\034\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\047\uffd6\050\uffd6\052\uffd6\057\uffd6\063\uffd6\064\uffd6\065" +
    "\uffd6\066\uffd6\067\uffd6\070\uffd6\072\uffd6\001\002\000\034" +
    "\004\037\005\033\016\006\033\015\037\012\045\034\046" +
    "\056\047\046\064\052\065\064\066\010\067\051\070\050" +
    "\001\002\000\034\004\037\005\033\016\006\033\015\037" +
    "\012\045\034\046\056\047\046\064\052\065\064\066\010" +
    "\067\051\070\050\001\002\000\034\004\037\005\033\016" +
    "\006\033\015\037\012\045\034\046\056\047\046\064\052" +
    "\065\064\066\010\067\051\070\050\001\002\000\034\004" +
    "\037\005\033\016\006\033\015\037\012\045\034\046\056" +
    "\047\046\064\052\065\064\066\010\067\051\070\050\001" +
    "\002\000\120\002\uffd2\004\uffd2\005\uffd2\006\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\026\uffd2" +
    "\027\uffd2\033\uffd2\034\uffd2\037\uffd2\040\uffd2\041\uffd2\043" +
    "\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\052\uffd2" +
    "\057\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070" +
    "\uffd2\072\uffd2\001\002\000\120\002\uffd3\004\uffd3\005\uffd3" +
    "\006\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\026\uffd3\027\uffd3\033\uffd3\034\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\052\uffd3\057\uffd3\063\uffd3\064\uffd3\065\uffd3\066" +
    "\uffd3\067\uffd3\070\uffd3\072\uffd3\001\002\000\120\002\uffd1" +
    "\004\uffd1\005\uffd1\006\uffd1\010\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\026\uffd1\027\uffd1\033\uffd1\034" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\052\uffd1\057\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\072\uffd1\001\002" +
    "\000\120\002\uffd4\004\uffd4\005\uffd4\006\uffd4\010\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\026\uffd4\027" +
    "\uffd4\033\uffd4\034\uffd4\037\uffd4\040\uffd4\041\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\052\uffd4\057" +
    "\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4" +
    "\072\uffd4\001\002\000\120\002\uffd7\004\uffd7\005\uffd7\006" +
    "\102\010\105\011\104\012\103\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\026\uffd7\027\uffd7\033\uffd7\034\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\052\uffd7\057\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7" +
    "\067\uffd7\070\uffd7\072\uffd7\001\002\000\110\002\uffd9\004" +
    "\077\005\100\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\026\uffd9\027" +
    "\uffd9\033\uffd9\034\uffd9\037\uffd9\040\uffd9\041\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\052\uffd9\057" +
    "\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9" +
    "\072\uffd9\001\002\000\034\004\037\005\033\016\006\033" +
    "\015\037\012\045\034\046\056\047\046\064\052\065\064" +
    "\066\010\067\051\070\050\001\002\000\034\004\037\005" +
    "\033\016\006\033\015\037\012\045\034\046\056\047\046" +
    "\064\052\065\064\066\010\067\051\070\050\001\002\000" +
    "\034\004\037\005\033\016\006\033\015\037\012\045\034" +
    "\046\056\047\046\064\052\065\064\066\010\067\051\070" +
    "\050\001\002\000\100\002\uffe3\004\uffe3\005\uffe3\014\066" +
    "\016\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\026\uffe3\027" +
    "\uffe3\033\uffe3\034\uffe3\037\uffe3\040\uffe3\041\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\052\uffe3\057" +
    "\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3" +
    "\072\uffe3\001\002\000\100\002\uffe4\004\uffe4\005\uffe4\014" +
    "\066\016\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\026\uffe4" +
    "\027\uffe4\033\uffe4\034\uffe4\037\uffe4\040\uffe4\041\uffe4\043" +
    "\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\052\uffe4" +
    "\057\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070" +
    "\uffe4\072\uffe4\001\002\000\100\002\uffe2\004\uffe2\005\uffe2" +
    "\014\066\016\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\026" +
    "\uffe2\027\uffe2\033\uffe2\034\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\052" +
    "\uffe2\057\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2" +
    "\070\uffe2\072\uffe2\001\002\000\004\037\123\001\002\000" +
    "\036\004\037\005\033\016\006\023\021\033\015\037\012" +
    "\045\034\046\056\047\046\064\052\065\064\066\010\067" +
    "\051\070\050\001\002\000\010\034\uffc0\040\uffc0\043\uffc0" +
    "\001\002\000\006\040\127\043\126\001\002\000\036\004" +
    "\037\005\033\016\006\023\021\033\015\037\012\045\034" +
    "\046\056\047\046\064\052\065\064\066\010\067\051\070" +
    "\050\001\002\000\004\044\130\001\002\000\004\071\131" +
    "\001\002\000\050\004\ufff4\005\ufff4\016\ufff4\023\ufff4\033" +
    "\ufff4\037\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\052\ufff4" +
    "\057\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070" +
    "\ufff4\072\ufff4\001\002\000\052\002\uffb6\004\uffb6\005\uffb6" +
    "\016\uffb6\023\uffb6\033\uffb6\037\uffb6\045\uffb6\046\uffb6\047" +
    "\uffb6\050\uffb6\052\uffb6\057\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\066\uffb6\067\uffb6\070\uffb6\072\uffb6\001\002\000\050\004" +
    "\037\005\033\016\006\023\021\033\015\037\012\045\034" +
    "\046\056\047\046\050\026\052\047\057\053\063\063\064" +
    "\052\065\030\066\010\067\051\070\050\072\134\001\002" +
    "\000\054\002\ufff6\004\ufff6\005\ufff6\016\ufff6\023\ufff6\033" +
    "\ufff6\037\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\052\ufff6\057\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067" +
    "\ufff6\070\ufff6\072\ufff6\001\002\000\050\004\ufff5\005\ufff5" +
    "\016\ufff5\023\ufff5\033\ufff5\037\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\050\ufff5\052\ufff5\057\ufff5\063\ufff5\064\ufff5\065\ufff5" +
    "\066\ufff5\067\ufff5\070\ufff5\072\ufff5\001\002\000\010\034" +
    "\uffbf\040\uffbf\043\uffbf\001\002\000\004\044\140\001\002" +
    "\000\004\071\131\001\002\000\052\002\ufff9\004\ufff9\005" +
    "\ufff9\016\ufff9\023\ufff9\033\ufff9\037\ufff9\045\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\052\ufff9\057\ufff9\063\ufff9\064\ufff9\065" +
    "\ufff9\066\ufff9\067\ufff9\070\ufff9\072\ufff9\001\002\000\052" +
    "\002\ufff2\004\ufff2\005\ufff2\016\ufff2\023\ufff2\033\ufff2\037" +
    "\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\052\ufff2\057\ufff2" +
    "\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\072" +
    "\ufff2\001\002\000\036\004\037\005\033\016\006\023\021" +
    "\033\015\037\012\045\034\046\056\047\046\064\052\065" +
    "\064\066\010\067\051\070\050\001\002\000\070\002\uffe8" +
    "\004\uffe8\005\uffe8\016\uffe8\021\uffe8\022\uffe8\023\uffe8\033" +
    "\uffe8\034\uffe8\037\uffe8\040\uffe8\041\uffe8\043\uffe8\044\uffe8" +
    "\045\uffe8\046\uffe8\047\uffe8\050\uffe8\052\uffe8\057\uffe8\063" +
    "\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\072\uffe8" +
    "\001\002\000\120\002\uffce\004\uffce\005\uffce\006\uffce\010" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\026" +
    "\uffce\027\uffce\033\uffce\034\uffce\037\uffce\040\uffce\041\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\052" +
    "\uffce\057\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce" +
    "\070\uffce\072\uffce\001\002\000\120\002\uffcf\004\uffcf\005" +
    "\uffcf\006\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\026\uffcf\027\uffcf\033\uffcf\034\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\052\uffcf\057\uffcf\063\uffcf\064\uffcf\065\uffcf" +
    "\066\uffcf\067\uffcf\070\uffcf\072\uffcf\001\002\000\036\004" +
    "\037\005\033\016\006\023\021\033\015\037\012\045\034" +
    "\046\056\047\046\064\052\065\064\066\010\067\051\070" +
    "\050\001\002\000\054\002\uffee\004\uffee\005\uffee\016\uffee" +
    "\023\uffee\033\uffee\037\uffee\041\uffee\045\uffee\046\uffee\047" +
    "\uffee\050\uffee\052\uffee\057\uffee\063\uffee\064\uffee\065\uffee" +
    "\066\uffee\067\uffee\070\uffee\072\uffee\001\002\000\004\044" +
    "\152\001\002\000\004\071\131\001\002\000\054\002\ufff8" +
    "\004\ufff8\005\ufff8\016\ufff8\023\ufff8\033\ufff8\037\ufff8\045" +
    "\ufff8\046\ufff8\047\ufff8\050\ufff8\051\154\052\ufff8\057\ufff8" +
    "\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\072" +
    "\ufff8\001\002\000\004\044\155\001\002\000\004\071\131" +
    "\001\002\000\052\002\ufff7\004\ufff7\005\ufff7\016\ufff7\023" +
    "\ufff7\033\ufff7\037\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7" +
    "\052\ufff7\057\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067" +
    "\ufff7\070\ufff7\072\ufff7\001\002\000\034\004\037\005\033" +
    "\016\006\033\015\037\012\045\034\046\056\047\046\064" +
    "\052\065\064\066\010\067\051\070\050\001\002\000\120" +
    "\002\uffcb\004\uffcb\005\uffcb\006\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\026\uffcb\027\uffcb\033" +
    "\uffcb\034\uffcb\037\uffcb\040\uffcb\041\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\052\uffcb\057\uffcb\063" +
    "\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\072\uffcb" +
    "\001\002\000\070\002\uffe6\004\uffe6\005\uffe6\016\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\033\uffe6\034\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050" +
    "\uffe6\052\uffe6\057\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6" +
    "\067\uffe6\070\uffe6\072\uffe6\001\002\000\036\004\037\005" +
    "\033\016\006\023\021\033\015\037\012\045\034\046\056" +
    "\047\046\064\052\065\064\066\010\067\051\070\050\001" +
    "\002\000\070\002\uffea\004\uffea\005\uffea\016\uffea\021\143" +
    "\022\uffea\023\uffea\033\uffea\034\uffea\037\uffea\040\uffea\041" +
    "\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea" +
    "\052\uffea\057\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067" +
    "\uffea\070\uffea\072\uffea\001\002\000\006\034\165\043\126" +
    "\001\002\000\122\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\026\uffc1\027\uffc1\033\uffc1\034\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\052\uffc1\057\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\067\uffc1\070\uffc1\072\uffc1\001\002\000\122\002\uffc2\004" +
    "\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\027\uffc2\033\uffc2" +
    "\034\uffc2\037\uffc2\040\uffc2\041\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\052\uffc2\057\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\072\uffc2\001" +
    "\002\000\006\040\171\043\170\001\002\000\040\004\037" +
    "\005\033\016\006\023\021\033\015\037\012\040\172\045" +
    "\034\046\056\047\046\064\052\065\064\066\010\067\051" +
    "\070\050\001\002\000\122\002\uffc3\004\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\026\uffc3\027\uffc3\033\uffc3\034\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\052\uffc3\057\uffc3\063\uffc3\064\uffc3\065\uffc3" +
    "\066\uffc3\067\uffc3\070\uffc3\072\uffc3\001\002\000\122\002" +
    "\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\026\uffc4\027\uffc4" +
    "\033\uffc4\034\uffc4\037\uffc4\040\uffc4\041\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\052\uffc4\057\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\072" +
    "\uffc4\001\002\000\052\002\ufff0\004\ufff0\005\ufff0\016\ufff0" +
    "\023\ufff0\033\ufff0\037\ufff0\045\ufff0\046\ufff0\047\ufff0\050" +
    "\ufff0\052\ufff0\057\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0" +
    "\067\ufff0\070\ufff0\072\ufff0\001\002\000\120\002\uffcd\004" +
    "\uffcd\005\uffcd\006\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\026\uffcd\027\uffcd\033\uffcd\034\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\043\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\052\uffcd\057\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\067\uffcd\070\uffcd\072\uffcd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\002\003\001\001\000\072\005\034\006" +
    "\040\007\023\010\053\012\037\015\044\016\017\017\004" +
    "\020\013\021\061\022\024\023\012\024\006\025\054\026" +
    "\022\027\015\030\021\031\060\032\016\033\043\034\056" +
    "\035\057\036\030\037\026\040\041\041\042\042\010\043" +
    "\035\001\001\000\002\001\001\000\022\016\017\017\004" +
    "\020\013\021\061\022\024\023\173\040\041\041\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\004\166\016\017\017\004\020\013\021\061\022" +
    "\024\023\012\024\006\025\054\026\022\027\015\030\021" +
    "\031\060\032\016\033\043\034\056\035\057\036\123\040" +
    "\041\041\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\004\163\016\017\017\004\020\013\021\061\022" +
    "\024\023\012\024\006\025\054\026\022\027\015\030\021" +
    "\031\060\032\016\033\043\034\056\035\057\036\123\040" +
    "\041\041\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\016\017\017\004\020\013\021" +
    "\061\022\024\023\012\024\006\025\054\026\022\027\015" +
    "\030\021\031\060\034\160\035\057\040\041\041\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\016\017\017\004\020\013\021" +
    "\061\022\024\023\012\024\006\025\054\026\022\027\015" +
    "\030\021\031\060\032\016\033\043\034\056\035\057\036" +
    "\150\040\041\041\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\016" +
    "\017\017\004\020\013\021\061\022\024\023\145\040\041" +
    "\041\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\016\017\017\004\020\013\021\061" +
    "\022\024\023\144\040\041\041\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\016\017\017\004\020\013\021\061\022\024\023\012" +
    "\024\006\025\054\026\022\027\015\030\021\031\060\032" +
    "\016\033\043\034\056\035\057\036\136\040\041\041\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\016\017\017\004" +
    "\020\013\021\061\022\024\023\012\024\006\025\054\026" +
    "\022\027\015\030\021\031\060\032\016\033\043\034\056" +
    "\035\057\036\064\040\041\041\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\016\017\017\004\020\013" +
    "\021\061\022\024\023\012\024\006\025\054\026\022\027" +
    "\015\030\066\040\041\041\042\001\001\000\002\001\001" +
    "\000\032\016\017\017\004\020\013\021\061\022\024\023" +
    "\012\024\006\025\054\026\022\027\070\040\041\041\042" +
    "\001\001\000\002\001\001\000\030\016\017\017\004\020" +
    "\013\021\061\022\024\023\012\024\006\025\054\026\072" +
    "\040\041\041\042\001\001\000\002\001\001\000\026\016" +
    "\017\017\004\020\013\021\061\022\024\023\012\024\006" +
    "\025\112\040\041\041\042\001\001\000\026\016\017\017" +
    "\004\020\013\021\061\022\024\023\012\024\006\025\075" +
    "\040\041\041\042\001\001\000\002\001\001\000\024\016" +
    "\017\017\004\020\013\021\061\022\024\023\012\024\111" +
    "\040\041\041\042\001\001\000\024\016\017\017\004\020" +
    "\013\021\061\022\024\023\012\024\100\040\041\041\042" +
    "\001\001\000\002\001\001\000\022\016\017\017\004\020" +
    "\013\021\061\022\024\023\110\040\041\041\042\001\001" +
    "\000\022\016\017\017\004\020\013\021\061\022\024\023" +
    "\107\040\041\041\042\001\001\000\022\016\017\017\004" +
    "\020\013\021\061\022\024\023\106\040\041\041\042\001" +
    "\001\000\022\016\017\017\004\020\013\021\061\022\024" +
    "\023\105\040\041\041\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\016\017\017\004\020" +
    "\013\021\061\022\024\023\012\024\006\025\054\026\022" +
    "\027\015\030\021\031\120\040\041\041\042\001\001\000" +
    "\036\016\017\017\004\020\013\021\061\022\024\023\012" +
    "\024\006\025\054\026\022\027\015\030\021\031\117\040" +
    "\041\041\042\001\001\000\036\016\017\017\004\020\013" +
    "\021\061\022\024\023\012\024\006\025\054\026\022\027" +
    "\015\030\021\031\116\040\041\041\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\004\124\016\017\017\004\020\013\021\061" +
    "\022\024\023\012\024\006\025\054\026\022\027\015\030" +
    "\021\031\060\032\016\033\043\034\056\035\057\036\123" +
    "\040\041\041\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\016\017\017\004\020\013\021\061\022\024" +
    "\023\012\024\006\025\054\026\022\027\015\030\021\031" +
    "\060\032\016\033\043\034\056\035\057\036\135\040\041" +
    "\041\042\001\001\000\002\001\001\000\004\013\131\001" +
    "\001\000\004\014\132\001\001\000\002\001\001\000\072" +
    "\005\134\006\040\007\023\010\053\012\037\015\044\016" +
    "\017\017\004\020\013\021\061\022\024\023\012\024\006" +
    "\025\054\026\022\027\015\030\021\031\060\032\016\033" +
    "\043\034\056\035\057\036\030\037\026\040\041\041\042" +
    "\042\010\043\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\016" +
    "\017\017\004\020\013\021\061\022\024\023\012\024\006" +
    "\025\054\026\022\027\015\030\021\031\060\034\143\035" +
    "\057\040\041\041\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\016\017\017\004\020" +
    "\013\021\061\022\024\023\012\024\006\025\054\026\022" +
    "\027\015\030\021\031\060\032\016\033\043\034\056\035" +
    "\057\036\147\040\041\041\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\155\001\001\000\002" +
    "\001\001\000\022\016\017\017\004\020\013\021\061\022" +
    "\024\023\157\040\041\041\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\016\017\017\004\020\013\021" +
    "\061\022\024\023\012\024\006\025\054\026\022\027\015" +
    "\030\021\031\060\033\162\034\056\035\057\040\041\041" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\016" +
    "\017\017\004\020\013\021\061\022\024\023\012\024\006" +
    "\025\054\026\022\027\015\030\021\031\060\032\016\033" +
    "\043\034\056\035\057\036\135\040\041\041\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }

    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // funcdef ::= DEF ID LPAREN expression_list RPAREN DOSPUNTOS suite 
            {
              FuncionDef RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Expresion> el = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Sentencia> s = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
												for (Expresion e: el){
													if(e.getTipo()!=TipoExpresion.ID)
														throw new ParsingException("Error en la declaracion de funcion: debe ingresar una lista de identificadores");
												}
												ArrayList<String> parametros = new ArrayList<String> ();
												for (Expresion e: el){
													parametros.add(e.getValor());
												}
												RESULT = new FuncionDef(id, parametros, s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcdef",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // print_stmt ::= PRINT expression 
            {
              FuncionesPredefinidas RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new FuncionesPredefinidas("print", e, eleft+1,eright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print_stmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // literal ::= NONE 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(n,TipoExpresion.NONE,nleft+1,nright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // literal ::= FALSE 
            {
              Expresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(f,TipoExpresion.BOOL,fleft+1,fright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // literal ::= TRUE 
            {
              Expresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(t,TipoExpresion.BOOL,tleft+1,tright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // literal ::= FLOAT 
            {
              Expresion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(d,TipoExpresion.FLOAT,dleft+1,dright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // literal ::= LONG 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(l,TipoExpresion.LONG,lleft+1,lright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // literal ::= INTEGER 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(i,TipoExpresion.INTEGER,ileft+1,iright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literal ::= STRING 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(s,TipoExpresion.STRING,sleft+1,sright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression_list ::= expression_list COMA expression 
            {
              ArrayList<Expresion> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expresion> el = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 el.add(e); RESULT = el;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression_list ::= expression 
            {
              ArrayList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Expresion> a = new ArrayList<Expresion>();
										a.add(e) ;
										RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // list_display ::= LCORCHETE expression_list RCORCHETE 
            {
              Expresion RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expresion> el = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Expresion("LIST",el,TipoExpresion.LIST,elleft+1,elright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_display",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parenth_form ::= LPAREN RPAREN 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ArrayList<Expresion> a = new ArrayList<Expresion>();
									RESULT = new Expresion("TUPLA",a,TipoExpresion.TUPLA,lleft+1,lright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parenth_form",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parenth_form ::= LPAREN expression_list RPAREN 
            {
              Expresion RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expresion> el = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (el.size() == 1) 
														RESULT = el.get(0);
													else 
														RESULT = new Expresion("TUPLA",el,TipoExpresion.TUPLA,elleft+1,elright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parenth_form",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parenth_form ::= LPAREN expression_list COMA RPAREN 
            {
              Expresion RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expresion> el = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Expresion("TUPLA",el,TipoExpresion.TUPLA,elleft+1,elright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parenth_form",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // enclosure ::= parenth_form 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion p = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enclosure",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // enclosure ::= list_display 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion l = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enclosure",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // atom ::= ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expresion(id,TipoExpresion.ID,idleft+1,idright+1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // atom ::= enclosure 
            {
              Expresion RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion en = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = en;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // atom ::= literal 
            {
              Expresion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion l = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // primary ::= atom 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // power ::= primary OPAEXP u_expr 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion p = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("**",p,u,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("power",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // power ::= primary 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion p = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("power",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // u_expr ::= OPBABNOT u_expr 
            {
              Expresion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("~",u,TipoExpresion.UNARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("u_expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // u_expr ::= OPAMAS u_expr 
            {
              Expresion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("+",u,TipoExpresion.UNARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("u_expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // u_expr ::= OPAMENOS u_expr 
            {
              Expresion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("-",u,TipoExpresion.UNARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("u_expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // u_expr ::= power 
            {
              Expresion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion p = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("u_expr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // m_expr ::= m_expr OPAMOD u_expr 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion m = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("%",m,u,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // m_expr ::= m_expr OPADIV u_expr 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion m = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("/",m,u,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // m_expr ::= m_expr OPADIVENTERA u_expr 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion m = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("//",m,u,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // m_expr ::= m_expr OPAPROD u_expr 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion m = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("*",m,u,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // m_expr ::= u_expr 
            {
              Expresion RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion u = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // a_expr ::= a_expr OPAMENOS m_expr 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion m = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("-",a,m,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // a_expr ::= a_expr OPAMAS m_expr 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion m = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("+",a,m,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // a_expr ::= m_expr 
            {
              Expresion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion m = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("a_expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // shift_expr ::= shift_expr OPBABSHIFTL a_expr 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("<<",s,a,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // shift_expr ::= shift_expr OPBABSHIFTR a_expr 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion(">>",s,a,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // shift_expr ::= a_expr 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shift_expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // and_expr ::= and_expr OPBABDAND shift_expr 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("&",a,s,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // and_expr ::= shift_expr 
            {
              Expresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion s = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // xor_expr ::= xor_expr OPBABXOR and_expr 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion x = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("^",x,a,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("xor_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // xor_expr ::= and_expr 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("xor_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // or_expr ::= or_expr OPBABOR xor_expr 
            {
              Expresion RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion or = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion x = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("|",or,x,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("or_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // or_expr ::= xor_expr 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion x = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = x; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("or_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comparison ::= comparison OPBIGUAL or_expr 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion or = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("!=",c,or,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comparison ::= comparison OPBMAYOR or_expr 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion or = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion(">",c,or,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comparison ::= comparison OPBMENOR or_expr 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion or = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("<",c,or,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comparison ::= or_expr 
            {
              Expresion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion o = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = o; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // not_test ::= NOT not_test 
            {
              Expresion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("not",n,TipoExpresion.UNARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_test",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // not_test ::= comparison 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not_test",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // and_test ::= and_test AND not_test 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("and",a,n,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_test",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // and_test ::= not_test 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_test",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // or_test ::= or_test OR and_test 
            {
              Expresion RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion or = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expresion("or",or,a,TipoExpresion.BINARIA,oleft+1,oright+1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("or_test",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // or_test ::= and_test 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("or_test",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= or_test 
            {
              Expresion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion o = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = o; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression_stmt ::= expression 
            {
              Expresion RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion el = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = el;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assignment_stmt ::= ID ASIG expression 
            {
              Variable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Variable(i,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // simple_stmt ::= print_stmt 
            {
              Sentencia RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncionesPredefinidas p = (FuncionesPredefinidas)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simple_stmt ::= print_stmt PUNTOYCOMA 
            {
              Sentencia RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FuncionesPredefinidas p = (FuncionesPredefinidas)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simple_stmt ::= assignment_stmt 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // simple_stmt ::= assignment_stmt PUNTOYCOMA 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // simple_stmt ::= expression_stmt 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // suite_statment ::= 
            {
              ArrayList<Sentencia> RESULT =null;
		 RESULT = new ArrayList<Sentencia>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite_statment",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // suite_statment ::= suite_statment statment 
            {
              ArrayList<Sentencia> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Sentencia> ss = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ss.add(s); RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite_statment",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // suite ::= TAB suite_statment NOTAB 
            {
              ArrayList<Sentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Sentencia> s = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("suite",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // if_stmt ::= IF expression DOSPUNTOS suite ELSE DOSPUNTOS suite 
            {
              Sentencia RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion pe = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int suleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Sentencia> su = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int su2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int su2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Sentencia> su2 = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(pe,su,su2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // if_stmt ::= IF expression DOSPUNTOS suite 
            {
              Sentencia RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion pe = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int suleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Sentencia> su = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(pe,su);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // while_stmt ::= WHILE expression DOSPUNTOS suite 
            {
              Sentencia RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion pe = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int suleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Sentencia> su = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new While(pe,su);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // compound_stmt ::= funcdef 
            {
              Sentencia RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FuncionDef f = (FuncionDef)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // compound_stmt ::= while_stmt 
            {
              Sentencia RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia w = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = w; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // compound_stmt ::= if_stmt 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statment ::= compound_stmt 
            {
              Sentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia c = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statment",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statment ::= simple_stmt 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statment",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              ArrayList<Sentencia> RESULT =null;
		 RESULT = new ArrayList<Sentencia>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Sentencia> start_val = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program statment 
            {
              ArrayList<Sentencia> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Sentencia> p = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 p.add(s); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

