/* The following code was generated by JFlex 1.4.1 on 15/07/15 03:09 AM */

package com.language.parser;

import java.util.*;
import java_cup.runtime.*;
import com.language.exceptions.*;
import com.language.model.expression.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 15/07/15 03:09 AM from the specification file
 * <tt>C:/Users/Sebasti√°nGuillermo/git/Compiladores/language/jflex/Scanner.jflex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int MLCSSTRING = 4;
  public static final int MLSTRING = 3;
  public static final int CSSTRING = 2;
  public static final int TAB = 5;
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\77\1\2\1\0\1\3\1\1\22\0\1\3\1\35\1\75"+
    "\1\4\1\0\1\17\1\20\1\76\1\42\1\43\1\15\1\13\1\44"+
    "\1\14\1\12\1\16\1\7\11\10\1\46\1\45\1\24\1\34\1\25"+
    "\2\0\5\5\1\52\5\5\1\11\1\5\1\55\5\5\1\47\6\5"+
    "\1\36\1\100\1\37\1\22\1\6\1\0\1\26\1\62\1\64\1\30"+
    "\1\51\1\57\1\72\1\61\1\56\1\71\1\63\1\53\1\66\1\27"+
    "\1\31\1\67\1\5\1\32\1\54\1\33\1\50\1\70\1\60\1\73"+
    "\1\65\1\74\1\40\1\21\1\41\1\23\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\4\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\6\3\1\21\1\1\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\20\3\1\33\1\34"+
    "\1\35\1\36\1\37\1\35\1\37\3\35\1\40\1\41"+
    "\1\42\1\2\1\43\1\0\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\5\3\1\52\3\3\1\53\1\54\12\3"+
    "\1\55\1\3\1\56\14\3\2\0\1\57\1\60\1\61"+
    "\1\62\1\63\2\0\1\64\1\65\1\66\1\67\1\3"+
    "\1\70\1\71\12\3\1\72\4\3\1\73\2\3\1\74"+
    "\10\3\1\75\3\3\1\76\1\77\1\3\1\100\3\3"+
    "\1\101\1\102\3\3\1\103\1\104\1\3\1\105\4\3"+
    "\1\106\3\3\1\107\4\3\1\110\3\3\1\111\1\3"+
    "\1\112\1\3\1\113\1\114\1\3\1\115\1\116\1\117"+
    "\1\3\1\120\1\3\1\121\1\122\1\3\1\123\2\3"+
    "\1\124\1\125\1\126\2\3\1\127\1\3\1\130\2\3"+
    "\1\131\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0186\0\u0249\0\u028a\0\u02cb\0\u030c\0\u0186\0\u0186"+
    "\0\u0186\0\u034d\0\u038e\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596"+
    "\0\u05d7\0\u0618\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186"+
    "\0\u0186\0\u0186\0\u0186\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d"+
    "\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965"+
    "\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0186\0\u0b2c"+
    "\0\u0b6d\0\u0bae\0\u0186\0\u0bef\0\u0c30\0\u0c71\0\u0186\0\u0186"+
    "\0\u0cb2\0\u0186\0\u0cf3\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186"+
    "\0\u0186\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u028a\0\u0e79"+
    "\0\u0eba\0\u0efb\0\u0186\0\u0186\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff"+
    "\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207"+
    "\0\u028a\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce"+
    "\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u0186"+
    "\0\u0186\0\u0186\0\u0186\0\u0186\0\u15d6\0\u1617\0\u0186\0\u0186"+
    "\0\u0cf3\0\u028a\0\u1658\0\u028a\0\u028a\0\u1699\0\u16da\0\u171b"+
    "\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u028a"+
    "\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u028a\0\u1a27\0\u1a68\0\u028a"+
    "\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70"+
    "\0\u028a\0\u1cb1\0\u1cf2\0\u1d33\0\u0186\0\u0186\0\u1d74\0\u028a"+
    "\0\u1db5\0\u1df6\0\u1e37\0\u028a\0\u028a\0\u1e78\0\u1eb9\0\u1efa"+
    "\0\u028a\0\u028a\0\u1f3b\0\u028a\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f"+
    "\0\u028a\0\u2080\0\u20c1\0\u2102\0\u028a\0\u2143\0\u2184\0\u21c5"+
    "\0\u2206\0\u028a\0\u2247\0\u2288\0\u22c9\0\u028a\0\u230a\0\u028a"+
    "\0\u234b\0\u028a\0\u028a\0\u238c\0\u028a\0\u028a\0\u028a\0\u23cd"+
    "\0\u028a\0\u240e\0\u028a\0\u028a\0\u244f\0\u028a\0\u2490\0\u24d1"+
    "\0\u028a\0\u028a\0\u028a\0\u2512\0\u2553\0\u028a\0\u2594\0\u028a"+
    "\0\u25d5\0\u2616\0\u028a\0\u028a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\7\1\15"+
    "\1\16\1\14\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\14\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\2\14\1\71\1\72"+
    "\1\73\3\14\1\74\1\75\1\12\1\7\1\76\1\7"+
    "\1\0\72\76\1\77\2\76\1\100\1\101\1\7\1\0"+
    "\73\101\1\77\1\101\1\102\1\76\2\103\72\76\1\104"+
    "\2\76\1\7\1\101\2\103\73\101\1\105\1\101\3\7"+
    "\1\0\74\7\1\106\1\7\103\0\1\11\2\0\1\107"+
    "\1\0\3\107\14\0\6\107\13\0\26\107\2\0\1\110"+
    "\6\0\1\107\1\0\3\107\14\0\6\107\13\0\26\107"+
    "\2\0\1\110\1\0\1\13\1\111\1\12\76\13\5\0"+
    "\5\14\14\0\6\14\13\0\26\14\15\0\1\112\1\113"+
    "\40\0\1\112\34\0\2\16\1\112\1\113\40\0\1\112"+
    "\42\0\1\114\101\0\1\115\106\0\1\116\7\0\1\117"+
    "\71\0\1\120\6\0\1\121\51\0\5\14\14\0\1\14"+
    "\1\122\4\14\13\0\20\14\1\123\5\14\11\0\5\14"+
    "\14\0\3\14\1\124\2\14\13\0\26\14\11\0\5\14"+
    "\14\0\6\14\13\0\2\14\1\125\4\14\1\126\16\14"+
    "\11\0\5\14\14\0\4\14\1\127\1\14\13\0\26\14"+
    "\11\0\5\14\14\0\1\130\5\14\13\0\2\14\1\131"+
    "\23\14\11\0\5\14\14\0\6\14\13\0\1\14\1\132"+
    "\24\14\40\0\1\133\100\0\1\134\51\0\5\14\14\0"+
    "\4\14\1\135\1\14\13\0\26\14\11\0\5\14\14\0"+
    "\6\14\13\0\4\14\1\136\17\14\1\137\1\14\11\0"+
    "\5\14\14\0\1\140\5\14\13\0\26\14\11\0\5\14"+
    "\14\0\6\14\13\0\2\14\1\141\4\14\1\142\16\14"+
    "\11\0\5\14\14\0\5\14\1\143\13\0\7\14\1\144"+
    "\10\14\1\145\5\14\11\0\5\14\14\0\3\14\1\146"+
    "\2\14\13\0\26\14\11\0\5\14\14\0\1\14\1\147"+
    "\3\14\1\150\13\0\10\14\1\151\15\14\11\0\5\14"+
    "\14\0\3\14\1\152\2\14\13\0\4\14\1\153\2\14"+
    "\1\154\16\14\11\0\5\14\14\0\6\14\13\0\12\14"+
    "\1\155\13\14\11\0\5\14\14\0\1\156\5\14\13\0"+
    "\26\14\11\0\5\14\14\0\4\14\1\157\1\14\13\0"+
    "\26\14\11\0\5\14\14\0\6\14\13\0\2\14\1\160"+
    "\23\14\11\0\5\14\14\0\3\14\1\161\2\14\13\0"+
    "\26\14\11\0\5\14\14\0\3\14\1\162\1\163\1\14"+
    "\13\0\26\14\11\0\5\14\14\0\1\164\5\14\13\0"+
    "\26\14\11\0\5\14\14\0\3\14\1\165\2\14\13\0"+
    "\26\14\101\0\1\166\101\0\1\167\2\0\1\76\2\0"+
    "\72\76\1\0\2\76\30\0\1\170\2\0\1\171\1\172"+
    "\41\0\1\173\3\0\1\101\2\0\73\101\1\0\1\101"+
    "\30\0\1\170\2\0\1\171\1\172\42\0\1\174\77\0"+
    "\1\175\101\0\1\176\3\0\3\177\1\0\1\200\1\0"+
    "\3\200\14\0\6\200\6\0\2\177\3\0\26\200\6\0"+
    "\1\12\105\0\2\201\75\0\5\14\14\0\2\14\1\202"+
    "\3\14\13\0\26\14\11\0\5\14\14\0\6\14\13\0"+
    "\20\14\1\203\5\14\11\0\5\14\14\0\5\14\1\204"+
    "\13\0\26\14\11\0\5\14\14\0\6\14\13\0\10\14"+
    "\1\205\15\14\11\0\5\14\14\0\6\14\13\0\15\14"+
    "\1\206\10\14\11\0\5\14\14\0\6\14\13\0\11\14"+
    "\1\207\14\14\11\0\5\14\14\0\6\14\13\0\20\14"+
    "\1\210\5\14\11\0\5\14\14\0\6\14\13\0\20\14"+
    "\1\211\5\14\11\0\5\14\14\0\6\14\13\0\1\14"+
    "\1\212\24\14\11\0\5\14\14\0\6\14\13\0\5\14"+
    "\1\213\20\14\11\0\5\14\14\0\5\14\1\214\13\0"+
    "\26\14\11\0\5\14\14\0\6\14\13\0\4\14\1\215"+
    "\21\14\11\0\5\14\14\0\1\14\1\216\4\14\13\0"+
    "\26\14\11\0\5\14\14\0\6\14\13\0\5\14\1\217"+
    "\20\14\11\0\5\14\14\0\4\14\1\220\1\14\13\0"+
    "\26\14\11\0\5\14\14\0\6\14\13\0\25\14\1\221"+
    "\11\0\5\14\14\0\6\14\13\0\4\14\1\222\21\14"+
    "\11\0\5\14\14\0\1\14\1\223\4\14\13\0\26\14"+
    "\11\0\5\14\14\0\2\14\1\224\2\14\1\225\13\0"+
    "\5\14\1\226\20\14\11\0\5\14\14\0\6\14\13\0"+
    "\2\14\1\227\23\14\11\0\5\14\14\0\4\14\1\230"+
    "\1\14\13\0\26\14\11\0\5\14\14\0\3\14\1\231"+
    "\2\14\13\0\26\14\11\0\5\14\14\0\1\14\1\232"+
    "\4\14\13\0\26\14\11\0\5\14\14\0\6\14\13\0"+
    "\7\14\1\233\16\14\11\0\5\14\14\0\6\14\13\0"+
    "\5\14\1\234\20\14\11\0\5\14\14\0\6\14\13\0"+
    "\2\14\1\235\23\14\11\0\5\14\14\0\6\14\13\0"+
    "\16\14\1\236\7\14\11\0\5\14\14\0\1\14\1\237"+
    "\4\14\13\0\1\14\1\240\24\14\11\0\5\14\14\0"+
    "\6\14\13\0\20\14\1\241\5\14\11\0\5\14\14\0"+
    "\6\14\13\0\7\14\1\242\16\14\11\0\5\14\14\0"+
    "\6\14\13\0\4\14\1\243\21\14\11\0\5\14\14\0"+
    "\6\14\13\0\7\14\1\244\16\14\101\0\1\245\101\0"+
    "\1\246\77\0\1\77\101\0\1\77\7\0\5\14\14\0"+
    "\6\14\13\0\2\14\1\247\23\14\11\0\5\14\14\0"+
    "\5\14\1\250\13\0\26\14\11\0\1\14\1\251\3\14"+
    "\14\0\6\14\13\0\26\14\11\0\5\14\14\0\6\14"+
    "\13\0\4\14\1\252\21\14\11\0\5\14\14\0\6\14"+
    "\13\0\4\14\1\253\21\14\11\0\5\14\14\0\6\14"+
    "\13\0\2\14\1\254\23\14\11\0\5\14\14\0\6\14"+
    "\13\0\2\14\1\255\23\14\11\0\5\14\14\0\6\14"+
    "\13\0\2\14\1\256\23\14\11\0\5\14\14\0\6\14"+
    "\13\0\5\14\1\257\20\14\11\0\5\14\14\0\6\14"+
    "\13\0\23\14\1\260\2\14\11\0\5\14\14\0\5\14"+
    "\1\261\13\0\26\14\11\0\5\14\14\0\6\14\13\0"+
    "\2\14\1\262\23\14\11\0\5\14\14\0\6\14\13\0"+
    "\7\14\1\263\16\14\11\0\5\14\14\0\6\14\13\0"+
    "\2\14\1\264\23\14\11\0\5\14\14\0\6\14\13\0"+
    "\2\14\1\265\23\14\11\0\5\14\14\0\6\14\13\0"+
    "\2\14\1\266\23\14\11\0\5\14\14\0\6\14\13\0"+
    "\17\14\1\267\6\14\11\0\5\14\14\0\1\270\5\14"+
    "\13\0\26\14\11\0\5\14\14\0\2\14\1\271\3\14"+
    "\13\0\26\14\11\0\5\14\14\0\6\14\13\0\4\14"+
    "\1\272\21\14\11\0\1\14\1\273\3\14\14\0\6\14"+
    "\13\0\26\14\11\0\5\14\14\0\1\274\5\14\13\0"+
    "\26\14\11\0\5\14\14\0\6\14\13\0\5\14\1\275"+
    "\20\14\11\0\5\14\14\0\5\14\1\276\13\0\26\14"+
    "\11\0\5\14\14\0\1\14\1\277\4\14\13\0\26\14"+
    "\11\0\5\14\14\0\1\14\1\300\4\14\13\0\26\14"+
    "\11\0\5\14\14\0\6\14\13\0\1\14\1\301\24\14"+
    "\11\0\5\14\14\0\1\14\1\302\4\14\13\0\26\14"+
    "\11\0\5\14\14\0\1\14\1\303\4\14\13\0\26\14"+
    "\11\0\5\14\14\0\6\14\13\0\7\14\1\304\16\14"+
    "\11\0\5\14\14\0\1\305\5\14\13\0\26\14\11\0"+
    "\5\14\14\0\6\14\13\0\2\14\1\306\23\14\11\0"+
    "\5\14\14\0\1\14\1\307\4\14\13\0\26\14\11\0"+
    "\5\14\14\0\6\14\13\0\2\14\1\310\23\14\11\0"+
    "\5\14\14\0\5\14\1\311\13\0\26\14\11\0\5\14"+
    "\14\0\5\14\1\312\13\0\26\14\11\0\5\14\14\0"+
    "\6\14\13\0\24\14\1\313\1\14\11\0\5\14\14\0"+
    "\4\14\1\314\1\14\13\0\26\14\11\0\5\14\14\0"+
    "\6\14\13\0\5\14\1\315\20\14\11\0\5\14\14\0"+
    "\5\14\1\316\13\0\26\14\11\0\5\14\14\0\6\14"+
    "\13\0\2\14\1\317\23\14\11\0\5\14\14\0\6\14"+
    "\13\0\14\14\1\320\11\14\11\0\5\14\14\0\6\14"+
    "\13\0\14\14\1\321\11\14\11\0\5\14\14\0\6\14"+
    "\13\0\7\14\1\322\16\14\11\0\5\14\14\0\5\14"+
    "\1\323\13\0\26\14\11\0\5\14\14\0\5\14\1\324"+
    "\13\0\26\14\11\0\5\14\14\0\6\14\13\0\2\14"+
    "\1\325\23\14\11\0\5\14\14\0\2\14\1\326\3\14"+
    "\13\0\26\14\11\0\5\14\14\0\1\14\1\327\4\14"+
    "\13\0\26\14\11\0\5\14\14\0\6\14\13\0\15\14"+
    "\1\330\10\14\11\0\5\14\14\0\2\14\1\331\3\14"+
    "\13\0\26\14\11\0\5\14\14\0\6\14\13\0\12\14"+
    "\1\332\13\14\11\0\5\14\14\0\5\14\1\333\13\0"+
    "\26\14\11\0\5\14\14\0\6\14\13\0\2\14\1\334"+
    "\23\14\11\0\5\14\14\0\1\14\1\335\4\14\13\0"+
    "\26\14\11\0\5\14\14\0\6\14\13\0\5\14\1\336"+
    "\20\14\11\0\5\14\14\0\6\14\13\0\20\14\1\337"+
    "\5\14\11\0\5\14\14\0\6\14\13\0\2\14\1\340"+
    "\23\14\11\0\5\14\14\0\6\14\13\0\16\14\1\336"+
    "\7\14\11\0\5\14\14\0\6\14\13\0\1\14\1\341"+
    "\24\14\11\0\5\14\14\0\6\14\13\0\1\14\1\342"+
    "\24\14\11\0\5\14\14\0\6\14\13\0\2\14\1\343"+
    "\23\14\11\0\5\14\14\0\5\14\1\344\13\0\26\14"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9815];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\2\3\1\11\4\1\3\11\2\1\5\11"+
    "\12\1\11\11\23\1\1\11\3\1\1\11\2\1\1\3"+
    "\2\15\1\1\1\11\1\0\6\11\11\1\2\11\31\1"+
    "\2\0\5\11\2\0\2\15\44\1\2\11\76\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[228];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private SymbolFactory sf;
	private StringBuffer string = new StringBuffer();

	int tabs = 0;
	int tabsAnterior = 0;

	public Scanner(java.io.InputStream r, SymbolFactory sf) {
		this(r);
		this.sf=sf;
	}

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { System.out.println("COMA"); return symbol(sym.COMA, ",");
          }
        case 91: break;
        case 82: 
          { System.out.println("FUNCION"); return symbol(sym.PRINT, "print");
          }
        case 92: break;
        case 46: 
          { System.out.println("IF"); return symbol(sym.IF, "if");
          }
        case 93: break;
        case 85: 
          { System.out.println("DATAFUNCION"); return symbol(sym.DATAFUNCION, "length");
          }
        case 94: break;
        case 1: 
          { throw new ParsingException("Illegal character at line " + yyline + ", column " + yycolumn + " >> " + yytext());
          }
        case 95: break;
        case 56: 
          { System.out.println("NOT"); return symbol(sym.NOT, "not");
          }
        case 96: break;
        case 71: 
          { System.out.println("DATAFUNCION"); return symbol(sym.DATAFUNCION, "keys");
          }
        case 97: break;
        case 87: 
          { System.out.println("DATAFUNCION"); return symbol(sym.DATAFUNCION, "has_key");
          }
        case 98: break;
        case 16: 
          { System.out.println("OPBMAYOR"); return symbol(sym.OPBMAYOR, ">");
          }
        case 99: break;
        case 65: 
          { System.out.println("TRUE"); return symbol(sym.TRUE , "True" );
          }
        case 100: break;
        case 55: 
          { System.out.println("AND"); return symbol(sym.AND, "and");
          }
        case 101: break;
        case 54: 
          { System.out.println("FLOAT: " + yytext()); return symbol(sym.FLOAT, yytext());
          }
        case 102: break;
        case 7: 
          { System.out.println("OPAMENOS"); return symbol(sym.OPAMENOS, "-");
          }
        case 103: break;
        case 44: 
          { System.out.println("OPBDISTINTO"); return symbol(sym.OPBDISTINTO, "!=");
          }
        case 104: break;
        case 77: 
          { System.out.println("DATAFUNCION"); return symbol(sym.DATAFUNCION, "items");
          }
        case 105: break;
        case 78: 
          { System.out.println("FUNCION"); return symbol(sym.FUNCION, "float");
          }
        case 106: break;
        case 38: 
          { System.out.println("OPBABSHIFTL"); return symbol(sym.OPBABSHIFTL, "<<");
          }
        case 107: break;
        case 66: 
          { System.out.println("ELSE"); return symbol(sym.ELSE, "else");
          }
        case 108: break;
        case 47: 
          { string.append('\n');
          }
        case 109: break;
        case 50: 
          { string.append('\"');
          }
        case 110: break;
        case 36: 
          { System.out.println("OPAEXP"); return symbol(sym.OPAEXP, "**");
          }
        case 111: break;
        case 28: 
          { string.setLength(0); yybegin(CSSTRING);
          }
        case 112: break;
        case 62: 
          { string.setLength(0); yybegin(MLSTRING);
          }
        case 113: break;
        case 58: 
          { System.out.println("FUNCION"); return symbol(sym.FUNCION, "str");
          }
        case 114: break;
        case 84: 
          { System.out.println("DATAFUNCION"); return symbol(sym.DATAFUNCION, "extend");
          }
        case 115: break;
        case 35: 
          { System.out.println("LONG: " + yytext()); return symbol(sym.LONG, yytext());
          }
        case 116: break;
        case 79: 
          { System.out.println("WHILE"); return symbol(sym.WHILE, "while");
          }
        case 117: break;
        case 70: 
          { System.out.println("DATAFUNCION"); return symbol(sym.DATAFUNCION, "find");
          }
        case 118: break;
        case 69: 
          { System.out.println("FALSE"); return symbol(sym.NONE, "None");
          }
        case 119: break;
        case 48: 
          { string.append('\r');
          }
        case 120: break;
        case 27: 
          { string.setLength(0); yybegin(STRING);
          }
        case 121: break;
        case 32: 
          { tabs++;
          }
        case 122: break;
        case 86: 
          { System.out.println("DATAFUNCION"); return symbol(sym.DATAFUNCION, "insert");
          }
        case 123: break;
        case 11: 
          { System.out.println("OPBABDAND"); return symbol(sym.OPBABDAND, "&");
          }
        case 124: break;
        case 9: 
          { System.out.println("OPADIV"); return symbol(sym.OPADIV, "/");
          }
        case 125: break;
        case 51: 
          { string.append('\'');
          }
        case 126: break;
        case 20: 
          { System.out.println("LLLAVE"); return symbol(sym.LLLAVE, "{");
          }
        case 127: break;
        case 75: 
          { System.out.println("DATAFUNCION"); return symbol(sym.DATAFUNCION, "split");
          }
        case 128: break;
        case 49: 
          { string.append('\t');
          }
        case 129: break;
        case 83: 
          { System.out.println("DATAFUNCION"); return symbol(sym.DATAFUNCION, "append");
          }
        case 130: break;
        case 60: 
          { System.out.println("FOR"); return symbol(sym.FOR, "for");
          }
        case 131: break;
        case 39: 
          { System.out.println("OPBMENORIGUAL"); return symbol(sym.OPBMENORIGUAL, "<=");
          }
        case 132: break;
        case 13: 
          { System.out.println("OPBABXOR"); return symbol(sym.OPBABXOR, "^");
          }
        case 133: break;
        case 67: 
          { System.out.println("FUNCION"); return symbol(sym.FUNCION, "list");
          }
        case 134: break;
        case 41: 
          { System.out.println("OPBMAYORIGUAL"); return symbol(sym.OPBMAYORIGUAL, ">=");
          }
        case 135: break;
        case 8: 
          { System.out.println("OPAPROD"); return symbol(sym.OPAPROD, "*");
          }
        case 136: break;
        case 80: 
          { System.out.println("BREAK"); return symbol(sym.BREAK, "break");
          }
        case 137: break;
        case 4: 
          { System.out.println("INTEGER: " + yytext()); return symbol(sym.INTEGER, yytext());
          }
        case 138: break;
        case 57: 
          { System.out.println("DEF"); return symbol(sym.DEF, "def");
          }
        case 139: break;
        case 14: 
          { System.out.println("OPBABNOT"); return symbol(sym.OPBABNOT, "~");
          }
        case 140: break;
        case 81: 
          { System.out.println("DATAFUNCION"); return symbol(sym.DATAFUNCION, "count");
          }
        case 141: break;
        case 22: 
          { System.out.println("LPAREN"); return symbol(sym.LPAREN, "(");
          }
        case 142: break;
        case 61: 
          { System.out.println("DATAFUNCION"); return symbol(sym.DATAFUNCION, "pop");
          }
        case 143: break;
        case 53: 
          { yybegin(YYINITIAL);
										tabs++;
										if (tabs < tabsAnterior) {
											yypushback(1);
											tabsAnterior--;
											System.out.println("NOTAB"); 
											return symbol(sym.NOTAB);
										}
										else if (tabs > tabsAnterior){
											tabsAnterior = tabs;
											System.out.println("TAB"); return symbol(sym.TAB);
										}
          }
        case 144: break;
        case 37: 
          { System.out.println("OPADIVENTERA"); return symbol(sym.OPADIVENTERA, "//");
          }
        case 145: break;
        case 40: 
          { System.out.println("OPBABSHIFTR"); return symbol(sym.OPBABSHIFTR, ">>");
          }
        case 146: break;
        case 63: 
          { string.setLength(0); yybegin(MLCSSTRING);
          }
        case 147: break;
        case 76: 
          { System.out.println("DATAFUNCION"); return symbol(sym.DATAFUNCION, "index");
          }
        case 148: break;
        case 42: 
          { System.out.println("OR"); return symbol(sym.OR, "or");
          }
        case 149: break;
        case 33: 
          { tabs = 0;
												if (tabs < tabsAnterior) {
													yypushback(1);
													tabsAnterior--;
													System.out.println("NOTAB"); 
													return symbol(sym.NOTAB);
												}
												else if (tabs > tabsAnterior){
													tabsAnterior = tabs;
													System.out.println("TAB"); return symbol(sym.TAB);
												}
          }
        case 150: break;
        case 72: 
          { System.out.println("DATAFUNCION"); return symbol(sym.DATAFUNCION, "join");
          }
        case 151: break;
        case 25: 
          { System.out.println("PUNTOYCOMA"); return symbol(sym.PUNTOYCOMA, ";");
          }
        case 152: break;
        case 15: 
          { System.out.println("OPBMENOR"); return symbol(sym.OPBMENOR, "<");
          }
        case 153: break;
        case 3: 
          { System.out.println("ID: " + yytext()); return symbol(sym.ID, yytext());
          }
        case 154: break;
        case 52: 
          { yybegin(YYINITIAL);
          }
        case 155: break;
        case 43: 
          { System.out.println("OPBIGUAL"); return symbol(sym.OPBIGUAL, "==");
          }
        case 156: break;
        case 31: 
          { string.append('\\');
          }
        case 157: break;
        case 68: 
          { System.out.println("DATAFUNCION"); return symbol(sym.DATAFUNCION, "size");
          }
        case 158: break;
        case 17: 
          { System.out.println("ASIG"); return symbol(sym.ASIG, "=");
          }
        case 159: break;
        case 88: 
          { System.out.println("DATAFUNCION"); return symbol(sym.DATAFUNCION, "replace");
          }
        case 160: break;
        case 21: 
          { System.out.println("RLLAVE"); return symbol(sym.RLLAVE, "}");
          }
        case 161: break;
        case 19: 
          { System.out.println("RCORCHETE"); return symbol(sym.RCORCHETE, "]");
          }
        case 162: break;
        case 73: 
          { System.out.println("FUNCION"); return symbol(sym.FUNCION, "tuple");
          }
        case 163: break;
        case 34: 
          { tabs = 0; yybegin(TAB);
          }
        case 164: break;
        case 90: 
          { System.out.println("FUNCION"); return symbol(sym.FUNCION, "raw_input");
          }
        case 165: break;
        case 5: 
          { System.out.println("PUNTO"); return symbol(sym.PUNTO, ".");
          }
        case 166: break;
        case 10: 
          { System.out.println("OPAMOD"); return symbol(sym.OPAMOD, "%");
          }
        case 167: break;
        case 74: 
          { System.out.println("FALSE"); return symbol(sym.FALSE, "False");
          }
        case 168: break;
        case 18: 
          { System.out.println("LCORCHETE"); return symbol(sym.LCORCHETE, "[");
          }
        case 169: break;
        case 2: 
          { /* ignore */
          }
        case 170: break;
        case 45: 
          { System.out.println("IN"); return symbol(sym.IN, "in");
          }
        case 171: break;
        case 30: 
          { yybegin(YYINITIAL);
							System.out.println("STRING: "  + string.toString()); return symbol(sym.STRING, string.toString());
          }
        case 172: break;
        case 29: 
          { string.append( yytext() );
          }
        case 173: break;
        case 23: 
          { System.out.println("RPAREN"); return symbol(sym.RPAREN, ")");
          }
        case 174: break;
        case 64: 
          { System.out.println("FUNCION"); return symbol(sym.FUNCION, "dict");
          }
        case 175: break;
        case 12: 
          { System.out.println("OPBABOR"); return symbol(sym.OPBABOR, "|");
          }
        case 176: break;
        case 59: 
          { System.out.println("FUNCION"); return symbol(sym.FUNCION, "int");
          }
        case 177: break;
        case 26: 
          { System.out.println("DOSPUNTOS"); return symbol(sym.DOSPUNTOS, ":");
          }
        case 178: break;
        case 89: 
          { System.out.println("CONTINUE"); return symbol(sym.CONTINUE, "continue");
          }
        case 179: break;
        case 6: 
          { System.out.println("OPAMAS"); return symbol(sym.OPAMAS, "+");
          }
        case 180: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {         if (tabsAnterior>0){
            tabsAnterior--;
            System.out.println("NOTAB");
            return symbol(sym.NOTAB);
        }
        return symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
